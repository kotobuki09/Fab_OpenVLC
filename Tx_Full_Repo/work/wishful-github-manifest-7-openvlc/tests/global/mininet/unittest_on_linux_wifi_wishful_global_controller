#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
unittest_on_linux_wifi_wishful_global_controller.py: A global WiSHFUL controller.

Usage:
   unittest_on_linux_wifi_wishful_global_controller.py [options] [-q | -v]

Options:
   --logfile name      Name of the logfile
   --config configFile Config file path

Example:
   ./unittest_on_linux_wifi_wishful_global_controller -v --config ./config.yaml

Other options:
   -h, --help          show this help message and exit
   -q, --quiet         print less text
   -v, --verbose       print more text
   --version           show version and exit
"""

import sys
import datetime
import logging
import wishful_controller
import gevent
import yaml
import pprint
import wishful_upis as upis

__author__ = "Zubow"
__copyright__ = "Copyright (c) 2015, Technische Universit√§t Berlin"
__version__ = "0.1.0"
__email__ = "{zubow}@tkn.tu-berlin.de"


log = logging.getLogger('wishful_controller.main')
controller = wishful_controller.Controller()
nodes = []
node0 = None
node1 = None
node0_iface = None
node1_iface = None


@controller.new_node_callback()
def new_node_cb(node):
    global node0, node1, nodes, node0_iface, node1_iface
    nodes.append(node)

    if node.name == "agent_1":
        node0 = node
        node0_iface = 'ap1-wlan0'
    elif node.name == "agent_2":
        node1 = node
        node1_iface = 'ap2-wlan0'

    log.info("New node appeared: {}".format(node.name))
    log.info(node)

@controller.node_exit_callback()
def node_exit_cb(node, reason):
    global node0, node1, nodes
    if node in nodes:
        nodes.remove(node);

    if node.name == "agent_1":
        node0 = None
    elif node.name == "agent_2":
        node1 = None

    log.info("NodeExit : NodeName : {} Reason : {}".format(node.name, reason))


@controller.set_default_callback()
def default_callback(group, node, cmd, data):
    global log
    log.info("DEFAULT CALLBACK : Group: {}, NodeName: {}, Cmd: {}, Returns: {}".format(group, node.name, cmd, data))


@controller.add_callback(upis.net.get_info_of_connected_devices)
def get_info_of_connected_devices_reponse(group, node, data):
    global log
    log.info("get_info_of_connected_devices_reponse : Group:{}, NodeName:{}, msg:{}".format(group, node.name, data))


def main(args):
    log.debug(args)

    config_file_path = args['--config']
    config = None
    with open(config_file_path, 'r') as f:
        config = yaml.load(f)

    controller.load_config(config)
    controller.start()
   
    # wait for 2 nodes
    while True:
        log.info("Waiting for %d(2) nodes; 1=%s, 2=%s" % (len(nodes), str(node0), str(node1)))
        if node0 and node1:
            break
        gevent.sleep(1)
    log.info("Found 2 nodes")

    #control loop
    while node0 and node1:
        log.info("")
        log.info("Connected nodes ... %s" % str([str(node.name) for node in nodes]))
        log.info("Connected nodes ... %s" % str([str(node.ip) for node in nodes]))

        ap1_sta = controller.node(node0).net.iface(node0_iface).get_tx_bytes_of_connected_devices()
        ap2_sta = controller.node(node1).net.iface(node1_iface).get_rx_bytes_of_connected_devices()

        log.info('STAs of AP1:\n{}'.format(pprint.pformat(ap1_sta)))
        log.info('STAs of AP2:\n{}'.format(pprint.pformat(ap2_sta)))

        gevent.sleep(1)


if __name__ == "__main__":
    try:
        from docopt import docopt
    except:
        print("""
        Please install docopt using:
            pip install docopt==0.6.1
        For more refer to:
        https://github.com/docopt/docopt
        """)
        raise

    args = docopt(__doc__, version=__version__)

    log_level = logging.INFO  # default
    if args['--verbose']:
        log_level = logging.DEBUG
    elif args['--quiet']:
        log_level = logging.ERROR

    logfile = None
    if args['--logfile']:
        logfile = args['--logfile']

    logging.basicConfig(filename=logfile, level=log_level,
        format='%(asctime)s - %(name)s.%(funcName)s() - %(levelname)s - %(message)s')

    try:
        main(args)
    except KeyboardInterrupt:
        log.debug("Controller exits")
    finally:
        log.debug("Exit")
        controller.stop()