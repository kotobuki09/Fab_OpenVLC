#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Usage:
   controller [options] [-q | -v]

Options:
   --logfile name	   Name of the logfile
   --config configFile Config file path
   --nodes name for nodes setup
   --experiment_info name experiment setup

Example:
   ./

Other options:
   -h, --help		   show this help message and exit
   -q, --quiet		   print less text
   -v, --verbose	   print more text
   --version		   show version and exit
"""

import datetime
import logging
import gevent
import os
import sys
import time
import json
import zmq
import yaml
import threading
import signal
import socket

sys.path.append('../')
sys.path.append('../../')
sys.path.append('../../../')
sys.path.append("../../../agent_modules/iperf/")
sys.path.append("../../../agent_modules/module_srslte/")
sys.path.append('../../../upis')
sys.path.append('../../../framework')
sys.path.append('../../../agent')
sys.path.append('../../../controller')
sys.path.append('../../../controller_modules')

import wishful_controller
import wishful_upis as upis
from helper.MeasurementManager import MeasurementCollector
from lib.global_controller_proxy import GlobalSolutionControllerProxy
from local_control_program import remote_control_program
import wishful_module_srslte

from agent_modules.wifi_wmp.wmp_structure import UPI_R
from agent_modules.wifi_wmp.wmp_structure import execution_engine_t
from agent_modules.wifi_wmp.wmp_structure import radio_platform_t
from agent_modules.wifi_wmp.wmp_structure import radio_info_t
from agent_modules.wifi_wmp.wmp_structure import radio_program_t


__author__ = "Domenico Garlisi, ...."
__copyright__ = "Copyright (c) ..., "
__version__ = "0.1.0"
__email__ = "domenico.garlisi@cnit.it; ..."


class WiFiNode():
	"""
	This class defines an WiFi node in order to :
		Set wireless lan interface ip address and network role (Station/AccessPoint)
		Stores/Removes low level measurements
		Store the low level measurements type
	"""
	def __init__(self, node, mac_address):
		""" Creates a new WiFiNode object
		"""
		self.node = node
		self.wlan_ipAddress = '192.168.0.' + node.ip.split('.')[3]
		self.mac_address = mac_address
		self.measurements = []
		self.measurements_types = []
		self.role = None
		self.platform = None
		self.interface = None
		self.interference_class = []

	def add_measure(self, measure):
		""" Adds a measure or a list of measurable in the list of node measurement
		:param measure: list of measure to add at measurements object attribute
		"""
		self.measurements.append(measure)

	def add_inferference_class(self, interf_class):
		""" Adds the predicted interference class
		:param class: the predicted interference class according to the classifier
		"""
		self.interference_class.append(interf_class)

	def get_available_measures(self):
		""" Gets the available measure of the node
		:return measure_list: the list of measure stored until now
		"""
		return self.measurements


log = logging.getLogger('wishful_agent.main')
controller = wishful_controller.Controller()
nodes_platform_info = None
eth_ip = None
role = None

wifiState = "DISABLE"
wifiStateChange = False
lteState = "DISABLE"
lteStateChange = False
tdmaState = "DISABLE"
tdmaStateChange = False

"""
Create MeasurementCollector object, to keep information about WiFiNode measurements and perform plotting result
"""
meas_collector = MeasurementCollector(log)

# Global list with all nodes (agents) connected to this controller. We start empty and append nodes when they start.
# See new_node function below
nodes = []
TOTAL_NODES = 1 # We expect 2 nodes to connect: 'tx', and 'rx'.

wifinodes = [] # list of WiSHFUL WiFI nodes
do_run = None # used to keep alive all the controller threads

SUCCESS = 0
FAILURE = 2

@controller.new_node_callback()
def new_node(node):
	""" This function is performed when a new node has been found in the network

	:param node: finded node
	"""
	nodes.append(node)
	print("New node appeared:")
	print(node)

@controller.node_exit_callback()
def node_exit(node, reason):
	""" This function is performed when a node, present in the controller node list, leave the experiment. During the
	experiment, the nodes send "hello packet" to the controller. If the controller do not receives hello packet from a node
	present in the node list, perform this function and the node is been removed

	:param node: node that leave the experiment
	:param reason : exit reason
	"""
	# Safety check
	if node in nodes:
		nodes.remove(node);
	print("NodeExit : NodeID : {} Reason : {}".format(node.id, reason))


@controller.add_callback(upis.radio.get_parameters)
def get_vars_response(group, node, data):
	""" This function implements a callback called when ANY get_* function is called in ANY of the nodes

	:param group: Experiment group name
	:param node: Node used to execute the UPI
	:param data: ::TODO::
	"""
	print("{} get_channel_reponse : Group:{}, NodeId:{}, msg:{}".format(datetime.datetime.now(), group, node.id, data))

def print_response(group, node, data):
	""" This function implements a callback to print generic UPI function calling result

	:param group: Experiment group name
	:param node: Node used to execute the UPI
	:param data: Execution time
	"""
	print("\n{} Print response : Group:{}, NodeIP:{}, Result:{}".format(datetime.datetime.now(), group, node.ip, data))


def start_command_connection():
	"""
					****	SETUP COMMAND RECEIVER	****
	This function is used to setup the connection with the experiment GUI,
	a ZMQ socket server is created on port 8500, able to receive command from GUI
	"""
	print(controller.name)
	socket_command_port = "8500"
	context = zmq.Context()
	socket_command = context.socket(zmq.PAIR)
	socket_command.bind("tcp://*:%s" % socket_command_port)
	print("Create server on port %s ... ready to receive command from experiment GUI" % socket_command_port)
	return socket_command

def start_visualizer_connection():
	"""
					****	SETUP STATISTICS VISUALIZER	****
	This function is used to setup the connection with the experiment GUI,
	a ZMQ socket client is created on port 8501, able to send statistical information to GUI
	"""
	print(controller.name)
	socket_visualizer_port = "8501"
	context = zmq.Context()
	socket_visualizer = context.socket(zmq.PUSH)
	socket_visualizer.connect("tcp://10.8.8.21:%s" % socket_visualizer_port)
	print("Connecting to server on port %s ... ready to send information to experiment GUI" % socket_visualizer_port)

	''' 
	implement OML database setup for realtime visualizer 
	in a different case, we can send the statistica information to the OMLBase
	'''
	# global omlInst
	# omlInst = oml4py.OMLBase("LocalControlProgram", "WiSHFUL", socket.gethostname(),"tcp:am.wilab2.ilabt.iminds.be:3004")
	# omlInst.addmp("IEEE802154_MACSTATS", "timestamp:int32 nodeID:int32 packetSize:int32 activeRadioprogram:string timeDiff:int32 numTxRequest:int32 numTxRequestFail:int32 numTxAttempt:int32 numTxSuccess:int32 numTxFail:int32 numTxBusy:int32 numTxNoAck:int32 numTxCollision:int32 numRx:int32 avgBackoffExponent:int32")
	# omlInst.start()

	return socket_visualizer

def collect_remote_messages(lcpDescriptor_node, socket_visualizer, mac_address, label, solutionCtrProxy):
	"""
	****	SETUP Collect results funciton	****
	This functions is used to collect information from remote local control program,
	the statistics are sent to the experiment GUI, and stored in the node.measurements list
	"""
	bad_plcp_old = 0
	good_plcp_old = 0
	bad_fcs_old = 0
	good_fcs_old = 0
	busy_time_old = 0

	interference_state = "NO interference"
	receive_thread = threading.currentThread()
	while getattr(receive_thread, "do_run", True):
		msg = lcpDescriptor_node.recv(timeout=0.1)
		if msg:
			# log.info("Recv: %s" % str(msg))
			# Recv: {'measure': [1522413397.5796762, 12.6], 'mac_address': 'b8:ae:ed:75:bb:1f'}
			if "mac_address" in msg:
				for ii in range(0, len(mac_address)):
					if msg['mac_address'] == mac_address[ii]:
						# print('message = %s - mac = %s' % (msg['measure'], msg['mac_address']))
						# message = [1522413397.5796762, 12.6] - mac = b8:ae: ed:75: bb:1f
						msg['label'] = label[ii]
						msg['type'] = u'statistics'
						if msg['label'] == 'A':

							# new version 2
							"""     
							{
								'type': 'monitorReport',
								'monitorType': 'performance'
								'networkController':'WIFI_CNIT',
								'networkType':'80211',
								'monitorValue': {
									'timestamp': 1522169960.4682555,
									'PER': 0.0030952405906813363,
									'THR': 8760.0}
								},
							}
							"""
							# value = {"WIFI": { "timestamp": msg["measure"][0], "THR": msg["measure"][1],  "PER":msg["measure"][2]} }
							value = {"timestamp": msg["measure"][0], "THR": msg["measure"][1], "PER": "0"}
							solutionCtrProxy.send_monitor_report("performance", "U-LTE", value)

						# print(msg)
						# socket_visualizer.send_json(msg)

			# add measurement on nodes element
			# for node in wifinodes:
			# 	if node.mac_address == msg['mac_address'] and msg['measure']:
			# 		node.measurements.append(msg['measure'])
		gevent.sleep(1)
		# time.sleep(1)

def loop_statistics(x):
	sock=socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
	print("10001")
	sock.bind(("127.0.0.1",10001))

	# {'UE_ID': 0, 'type': 'ue0_stats', 'CFO': -0.624144, 'SNR': 21.99383, 'PDCCH-Miss': 39.999996, 'PDSCH-BLER': 21.0, 'timestamp': 1524493482.429576}
	# {'UE_ID': 0, 'type': 'ue0_stats', 'CFO': -0.442906, 'SNR': 17.325897, 'PDCCH-Miss': 39.999996, 'PDSCH-BLER': 21.1, 'timestamp': 1524493483.429576}
	# {'UE_ID': 0, 'type': 'ue0_stats', 'CFO': -0.698449, 'SNR': 29.657462, 'PDCCH-Miss': 39.999996, 'PDSCH-BLER': 20.5, 'timestamp': 1524493484.429552}

	while True:
		try:
			data, addr = sock.recvfrom(1024) # buffer size is 1024 bytes
			stats=json.loads(data)
			print(stats)
		except Exception as e:
			print(e)





def setAP(controller, node, iface, wlan_ip, essid):
	""" Creates infrastructure BSS, uses node such as Access Point
	:param node: elected Access Point Node
	:param essid: the SSID
	"""
	# stop hostpad
	rvalue = controller.nodes(node).net.stop_hostapd()
	# set ip address
	rvalue = controller.nodes(node).net.set_ip_address(iface, wlan_ip)
	# set hostapd configuration
	rvalue = controller.nodes(node).net.set_hostapd_conf(iface, './helper/hostapd.conf', 6, essid)
	# start hostapd
	rvalue = controller.nodes(node).net.start_hostapd('./helper/hostapd.conf')
	# set power
	rvalue = controller.nodes(node).radio.set_tx_power(15)
	# set modulation rate
	# rvalue = controller.nodes(node).radio.set_modulation_rate(6)
	rvalue = controller.nodes(node).radio.set_modulation_rate(24)


def setSTA(controller, node, iface, wlan_ip, essid):
	""" Associate node to infrastructure BSS
	:param node: elected station node by associate
	:param essid: the SSID
	"""
	# stop hostpad
	rvalue = controller.nodes(node).net.stop_hostapd()
	# set ip address
	rvalue = controller.nodes(node).net.set_ip_address(iface, wlan_ip)
	# set power
	rvalue = controller.nodes(node).radio.set_tx_power(15)
	# set modulation rate
	# rvalue = controller.nodes(node).radio.set_modulation_rate(6)
	rvalue = controller.nodes(node).radio.set_modulation_rate(24)
	connected = False
	for ii in range(10):
		# associate station
		rvalue = controller.nodes(node).net.connect_to_network(iface, essid)
		time.sleep(2)
		# dump connection
		rvalue = controller.nodes(node).net.network_dump(iface)
		# self.log.debug('dump connection :\n%s\n'  % (str(rvalue) ))
		flow_info_lines = rvalue.rstrip().split('\n')
		if flow_info_lines[0][0:9] == "Connected":
			connected = True
			break

	return connected

def set_hosts(host_file):
	hosts_info_file = open(host_file, 'r').readlines()
	hosts_info = []
	for i in hosts_info_file:
		if not i.startswith("#"):
			hosts_info.append(i)
	j = 0
	hosts = [i.split(',')[j] for i in hosts_info]
	j = j + 1
	driver = [i.split(',')[j].replace("\n", "") for i in hosts_info]
	j = j + 1
	eth_ip = [i.split(',')[j].replace("\n", "") for i in hosts_info]
	j = j + 1
	freq = [i.split(',')[j].replace("\n", "") for i in hosts_info]
	j = j + 1
	tx_power = [i.split(',')[j].replace("\n", "") for i in hosts_info]
	j = j + 1
	wlan_ip = [i.split(',')[j].replace("\n", "") for i in hosts_info]
	j = j + 1
	mac_address = [i.split(',')[j].replace("\n", "") for i in hosts_info]
	j = j + 1
	label = [i.split(',')[j].replace("\n", "") for i in hosts_info]
	j = j + 1
	role = [i.split(',')[j].replace("\n", "") for i in hosts_info]
	j = j + 1
	iface = [i.split(',')[j].replace("\n", "") for i in hosts_info]

	return hosts, driver, eth_ip, freq, tx_power, wlan_ip, mac_address, label, role, iface


def get_platform_information(node, log, controller):
	""" Gives the node platform information and instantiates a object of radio_info_t class related to the node passed
		by argument parameter. The function sues UPI get_radio_platforms to check if WMP platform is available for node
		The function uses UPI get_radio_info to extracts node capabilities in terms of execution environment,
		radio program and platform info (parameters and measurements).

	:param node: node from get platform supported and capabilities
	:param log: experiment logging module attribute
	:param controller: experiment object controller
	:return current_platform_info: return an object of class radio_info_t with all the node capabilities, false if the WMP
							  platform is not supported by node or an error occurred.
	"""


	#list initialization
	current_radio_list = None
	current_radio_list = [radio_platform_t() for i in range(2)]

	current_platform_info = radio_info_t()
	current_platform_info.platform_info = radio_platform_t()
	current_platform_info.execution_engine_list = [execution_engine_t() for i in range(2) ]
	current_platform_info.radio_program_list = [ radio_program_t() for i in range(2) ]

	wmp_platform_index = None
	#get radio platform for the node
	current_radio_list_string = controller.nodes(node).radio.get_radio_platforms()

	current_radio_list[0].platform_id =  current_radio_list_string[0]
	current_radio_list[0].platform_type =  current_radio_list_string[1]

	for ii in range(len(current_radio_list)):
		log.info('INTERFACE : %s : SUPPORTED PLATFORM : %s' % (current_radio_list[ii].platform_id, current_radio_list[ii].platform_type) )
		if current_radio_list[ii].platform_type == "WMP" :
			wmp_platform_index = ii
			break

	# Check if the Node NIC support the WMP platform
	if wmp_platform_index == None :
		log.debug('No WMP platform is supported')
		return False

	# Gets available radio capabilities
	current_platform_info_str = controller.nodes(node).radio.get_radio_info(current_radio_list[wmp_platform_index].platform_id)
	log.debug('current_platform_str %s' % current_platform_info_str)

	current_platform_info.platform_info.platform_id = current_platform_info_str['radio_info'][0]
	current_platform_info.platform_info.platform_type = current_platform_info_str['radio_info'][1]

	log.debug("Radio capabilities for %s " % str(node))
	log.debug(" RADIO : %s - PLATFORM : %s" % (str(current_platform_info.platform_info.platform_id), str(current_platform_info.platform_info.platform_type) ) )

	# Gets monitor measurements and parameters supported
	current_platform_info.monitor_list = current_platform_info_str['monitor_list']
	current_platform_info.param_list = current_platform_info_str['param_list']

	# Gets supported execution environment supported
	execution_engine_list_name = current_platform_info_str['exec_engine_list_name']
	execution_engine_list_name = execution_engine_list_name[0]
	execution_engine_list_pointer = current_platform_info_str['exec_engine_list_pointer']
	execution_engine_list_pointer = execution_engine_list_pointer[0]
	current_platform_info.execution_engine_list = [execution_engine_t() for i in range(len(execution_engine_list_name)) ]
	for ii in range( len(execution_engine_list_name) ) :
		current_platform_info.execution_engine_list[ii].execution_engine_name = execution_engine_list_name[ii]
		current_platform_info.execution_engine_list[ii].execution_engine_pointer = execution_engine_list_pointer[ii]

	# Gets radio program supported
	radio_prg_list_name = current_platform_info_str['radio_prg_list_name']
	radio_prg_list_name = radio_prg_list_name [0]
	radio_prg_list_pointer = current_platform_info_str['radio_prg_list_pointer']
	radio_prg_list_pointer = radio_prg_list_pointer[0]
	current_platform_info.radio_program_list = [ radio_program_t() for i in range(len(radio_prg_list_name)) ]
	for ii in range(len(radio_prg_list_name)):
		current_platform_info.radio_program_list[ii].radio_prg_name = radio_prg_list_name[ii]
		current_platform_info.radio_program_list[ii].radio_prg_pointer = radio_prg_list_pointer[ii]

	return current_platform_info


def active_TDMA_radio_program(node, log, controller, current_platform_info):
	""" Set TDMA radio program and parameters on node. The TDMA radio program has three parameter, they are: superframe
		size, number of sync slot and allocated slot, this function set them together.

	:param node: Node or Nodes list
	:param log: experiment logging object
	:param controller: experiment object controller
	:param current_platform_info: node capabilities
	:return result: Result of setting (True = successful, False = failure)
	"""

	radio_program_pointer_TDMA = ""
	position = ""

	# Find TDMA radio program pointer in current_platform_info capability list
	for ii in range(len(current_platform_info.radio_program_list)):
		if current_platform_info.radio_program_list[ii].radio_prg_name == "TDMAMASK" :
			radio_program_pointer_TDMA = current_platform_info.radio_program_list[ii].radio_prg_pointer
			position = '2'

	# Active TDMA radio program
	UPIargs = {'position' : position, 'radio_program_name' : 'TDMAMASK', 'path' : radio_program_pointer_TDMA, 'interface' : 'wlan0' }
	rvalue = controller.nodes(node).radio.activate_radio_program(UPIargs)

	mask = "1111111111"
	UPIargs = {'interface': 'wlan0', UPI_R.TDMA_ALLOCATED_MASK_SLOT: int(mask,2)}
	rvalue = controller.nodes(node).radio.set_parameters(UPIargs)
	# rvalue = controller.radio.set_parameters(UPIargs)
	if rvalue[0] == SUCCESS:
		log.warning('Radio program configuration succesfull')
	else:
		log.warning('Error in radio program configuration')
		do_run = False

	position = '1'
	UPIargs = {'position': position, 'interface': 'wlan0'}
	rvalue = controller.nodes(node).radio.activate_radio_program(UPIargs)
	if rvalue != SUCCESS:
		log.warning('Error in radio program activation')
		return False
	else:
		log.warning('Radio program activation successful')

	return True


def wifiStatus():
	print("change wifi state")
	global wifiState, wifiStateChange
	if wifiState == "ENABLE":
		wifiState = "DISABLE"
	elif wifiState == "DISABLE":
		wifiState = "ENABLE"
	else:
		wifiState = "DISABLE"
		return

	wifiStateChange = True

def startLte():
	print("change lte state")
	global lteState, lteStateChange
	lteState = "ENABLE"
	lteStateChange = True


def stopLte():
	print("change lte state")
	global lteState, lteStateChange
	lteState = "DISABLE"
	lteStateChange = True

def enable_lte_2_subframe():
	print("set subframes 2")
	UDP_IP = "172.16.16.11"
	UDP_PORT = 8888
	tx_pattern = "1,1,0,0,0,0,0,0,0,0"
	sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
	sock.sendto(tx_pattern.encode(), (UDP_IP, UDP_PORT))
	sock.close()


def enable_lte_4_subframe():
	print("set subframes 4")
	UDP_IP = "172.16.16.11"
	UDP_PORT = 8888
	MESSAGE = "1,1,1,1,0,0,0,0,0,0"
	sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
	sock.sendto(MESSAGE.encode(), (UDP_IP, UDP_PORT))
	sock.close()


def enable_lte_6_subframe():
	print("set subframes 6")
	UDP_IP = "172.16.16.11"
	UDP_PORT = 8888
	MESSAGE = "1,1,1,1,1,1,0,0,0,0"
	sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
	sock.sendto(MESSAGE.encode(), (UDP_IP, UDP_PORT))
	sock.close()


def tdmaStatus():
	print("change TDMA state")
	global tdmaState, tdmaStateChange

	if tdmaState == "ENABLE":
		tdmaState = "DISABLE"
	elif tdmaState == "DISABLE":
		tdmaState = "ENABLE"
	else:
		tdmaState = "DISABLE"
		return

	tdmaStateChange = True



def signal_handler(signal, frame):
	global do_run
	do_run = False

signal.signal(signal.SIGINT, signal_handler)


# Entry point after globals initialization
def main(args):
	global nodes
	global do_run

	global controller
	global nodes_platform_info
	global eth_ip
	global role
	global tdmaState, tdmaStateChange, wifiState, wifiStateChange, lteState, lteStateChange

	# Init variables
	do_run = True
	# Init logging
	log.debug(args)
	log.info('****** 	WISHFUL  *****')
	log.info('****** Starting solution lte_ct ******')

	"""
	****** setup the communication with the solution global controller ******
	"""

	solutionCtrProxy = GlobalSolutionControllerProxy(ip_address="172.16.16.12", requestPort=7001, subPort=7000)
	networkName = "LTE_net"
	solutionName = ["LTE_CT"]
	# commands = { "STOP_LTE": (lambda: stopLte()), "STOP_TDMA": (lambda:tdmaStatus()), "START_LTE": (lambda:startLte()), "START_TDMA": (lambda:tdmaStatus())}
	commands = { "STOP_LTE": (lambda: stopLte()), "START_LTE": (lambda:startLte()), "ENABLE_LTE_2_SUBFRAME": (lambda: enable_lte_2_subframe()), "ENABLE_LTE_4_SUBFRAME": (lambda: enable_lte_4_subframe()), "ENABLE_LTE_6_SUBFRAME": (lambda: enable_lte_6_subframe())}
	monitorList = ["LTE-THR", "LTE-PER"]
	solutionCtrProxy.set_solution_attributes(networkName, solutionName, commands, monitorList )

	# Register lte_ct solution to global solution controller
	response = solutionCtrProxy.register_solution()
	if response:
		print("Solution was correctly registered to GlobalSolutionController")
		solutionCtrProxy.start_command_listener()
	else:
		print("Solution was not registered to Global Solution Controller")

	"""
	****** Solution experiment controller ******
	"""
	wlan_inject_iface = 'mon0'
	if args['--config']:
		config_file_path = args['--config']
		config = None
		with open(config_file_path, 'r') as f:
			config = yaml.load(f)
		controller.load_config(config)

	nodes_info_path = args['--nodes']
	if nodes_info_path:
		[hosts, driver, eth_ip, freq, tx_power, wlan_ip, mac_address, label, role, iface] = set_hosts(nodes_info_path)
		print([hosts, driver, eth_ip, freq, tx_power, wlan_ip, mac_address, label, role, iface])

	# Start controller
	controller.start()

	# control loop
	while do_run:
		gevent.sleep(1)
		print("\nConnected nodes", [str(node.id) for node in nodes])
		if len(nodes) >= len(hosts):
			lcpDescriptor_nodes = []
			reading_thread = []
			nodes_sort = []
			for ii in range(0, len(hosts)):
				for jj in range(0, len(nodes)):
					if nodes[jj].ip == eth_ip[ii]:
						nodes_sort.append(nodes[jj])
			print('sort nodes')
			for ii in range(0, len(nodes_sort)):
				print("\t %s - index %d" % (nodes_sort[ii].ip, ii))
			if len(nodes_sort) != len(hosts):
				print('Error in build node list')
				print('len(nodes_sort) != len(hosts) [%d != %d]' % (len(nodes_sort), len(hosts)))
				break
			else:
				print('len(nodes_sort) == len(hosts) [%d == %d]' % (len(nodes_sort), len(hosts)))
			nodes = nodes_sort

			time_update = 1  # seconds
			nodes_source_rate = []
			nodes_temp = []

			for ii in range(0, len(nodes)):
				nodes_source_rate.append(0)
				if not nodes[ii] in nodes_temp:
					# print("node %s - index %d" % (nodes[ii].ip, ii) )
					nodes_temp.append(nodes[ii])
			nodes = nodes_temp

			for ii in range(0, len(nodes)):
				wifinodes.append(WiFiNode(nodes[ii], mac_address[ii]))

			# START visualizer socket
			# socket_visualizer = start_visualizer_connection()
			socket_visualizer = None

			# thread.start_new_thread(loop_statistics, (1,))
			loop_statistics_thread = threading.Thread(target=loop_statistics, args=(1,))
			loop_statistics_thread.start()

			"""
			****** setup network ******
			"""
			try:
				print("START nodes setup")
				all_nodes = ['A', 'B']

				# SETUP AP NODES
				for ii in range(0, len(hosts)):
					# print("search node %s - index %d" % (eth_ip[ii], ii) )
					for jj in range(0, len(nodes)):
						if nodes[jj].ip == eth_ip[ii]:
							pos = eth_ip.index(nodes[jj].ip)
							if role[pos] == "AP":
								print("setup topology node %s - index %d" % (nodes[jj].ip, jj))
								setAP(controller, nodes[jj], iface[pos], wlan_ip[pos], "solution-lte-ct")
							elif role[pos] == "MON":
								pass
							elif role[pos] == "STA":
								pass
							elif role[pos] == "EB":
								print('\t- Starting program at TX Agent')
								controller.node(nodes[jj]).radio.set_parameters({'IS_UE': False})
								controller.node(nodes[jj]).radio.set_parameters({'FREQ': 2437000000})

								# controller.node(nodes[0]).radio.set_parameters({'RF_AMP': 0.8})
								controller.node(nodes[jj]).radio.set_parameters({'RF_AMP': 0.7})

								# controller.node(nodes[0]).radio.set_parameters({'GAIN': 20})
								# controller.node(nodes[jj]).radio.set_parameters({'GAIN': 120})
								controller.node(nodes[jj]).radio.set_parameters({'GAIN': 78})

								# controller.node(nodes[1]).radio.set_parameters({'NO_OF_FRAMES': 100000})
								controller.node(nodes[jj]).radio.set_parameters({'NO_OF_PRBS': 25})
								controller.node(nodes[jj]).radio.set_parameters({'WHICH_PRBS': 0xFFFF})

								# controller.node(nodes[0]).radio.set_parameters({'MCS': 1})
								controller.node(nodes[jj]).radio.set_parameters({'MCS': 28})

								# set any static  parameters needed to be set here for the ENB
								# controller.node(nodes[jj]).radio.activate_radio_program('ENB')
								# gevent.sleep(10)

							elif role[pos] == "UE":
								controller.node(nodes[jj]).radio.set_parameters({'IS_UE': True})
								controller.node(nodes[jj]).radio.set_parameters({'FREQ': 2437000000})
								controller.node(nodes[jj]).radio.set_parameters({'GAIN': 30})
								controller.node(nodes[jj]).radio.set_parameters({'NO_OF_ANTENNAS': 1})
								controller.node(nodes[jj]).radio.set_parameters({'EQUALIZER_MODE': 'mmse'})
								controller.node(nodes[jj]).radio.set_parameters({'MAX_TURBO_ITS': 3})
								controller.node(nodes[jj]).radio.set_parameters({'NOISE_EST_ALG': 0})
								controller.node(nodes[jj]).radio.set_parameters({'MAX_TURBO_ITS': 3})
								controller.node(nodes[jj]).radio.set_parameters({'SSS_ALGORITHM': 1})
								controller.node(nodes[jj]).radio.set_parameters({'SNR_EMA_COEFF': 0.1})
								controller.node(nodes[jj]).radio.set_parameters({'CFO_TOL': 50})


							else:
								print("no station role found ")
								break

				# SETUP STATIONS NODES
				for ii in range(0, len(hosts)):
					print("search node %s - index %d" % (eth_ip[ii], ii))
					for jj in range(0, len(nodes)):
						if nodes[jj].ip == eth_ip[ii]:
							pos = eth_ip.index(nodes[jj].ip)

							# set up network nodes (ad-hoc)
							# rvalue = controller.nodes(nodes[jj]).net.start_adhoc(driver[pos], "wlan0", "wishful-interference", freq[pos], tx_power[pos], "6", wlan_ip[pos], "250", "aa:bb:cc:dd:ee:ff", True)
							# rvalue = controller.nodes(nodes[jj]).net.start_adhoc(driver[pos], "wlan0", "wishful-interference", freq[pos], tx_power[pos], "6", wlan_ip[pos], "off", "aa:bb:cc:dd:ee:ff", True)

							# setup infrastructured network (put interface in managed mode and disable network manager)
							# set up network nodes (infrastructured)
							if role[pos] == "AP":
								pass
							elif role[pos] == "MON":
								rvalue = controller.nodes(nodes[jj]).net.start_monitor(driver[pos], iface[pos])
								rvalue = controller.nodes(nodes[jj]).radio.set_channel(iface[pos], "6")
							elif role[pos] == "STA":
								print("setup topology node %s - index %d" % (nodes[jj].ip, jj))
								connection_result = setSTA(controller, nodes[jj], iface[pos], wlan_ip[pos], "solution-lte-ct")
								print(connection_result)
								if connection_result == False:
									raise SystemExit('Unable to connect')

								# get node capabilities
								nodes_platform_info = get_platform_information(nodes[jj], log, controller)

								# get active radio program on station node
								# active_radio_program = controller.nodes(nodes[jj]).radio.get_running_radio_program()
								# print("radio program activated : %s (1=CSMA, 2=TDMA)" % str(active_radio_program))

								# active TDMA radio progrma on staiton node
								active_TDMA_radio_program(nodes[jj], log, controller, nodes_platform_info)

							else:
								print("no station role found ")
								break

								# set up nodes monitor interface
								# gevent.sleep(1)
								# rvalue = controller.nodes(nodes[jj]).net.start_monitor(driver[pos], iface[pos])

				print("END node setup")
			except (Exception) as err:
				print("exception", err)
				print("Error in node setup procedure")
				do_run = False

			"""
			****** START LOCAL CONTROL PROGRAM ******
			"""
			if do_run:
				try:
					print("START local control program")
					lcpDescriptor = None;
					for ii in range(0, len(hosts)):
						for jj in range(0, len(nodes)):
							print("search node %s - index %d" % (eth_ip[ii], ii))
							if nodes[jj].ip == eth_ip[ii]:
								pos = eth_ip.index(nodes[jj].ip)
								# if label[pos] == 'B' or label[pos] == 'C':
								if True:
									# RUN local control program
									print("start local control program on nodes")
									lcpDescriptor_nodes.append(
										controller.node(nodes[jj]).hc.start_local_control_program(program=remote_control_program))
									msg = {"iface": iface[pos], "i_time": time_update}
									lcpDescriptor_nodes[ii].send(msg)
									print("start thread for collect measurements from nodes")
									reading_thread.append(threading.Thread(target=collect_remote_messages, args=(lcpDescriptor_nodes[ii], socket_visualizer, mac_address, label, solutionCtrProxy)))
									reading_thread[ii].start()
								break

					print("END local control program setup")
				except (Exception) as err:
					print("exception", err)
					print("Error in node control program setup procedure")
					do_run = False


				"""
				****** MAIN LOOP WITH interface commands management (start/stop iperf flows) ******
				"""
				# for jj in range(0, len(nodes)):
				# 	pos = eth_ip.index(nodes[jj].ip)
				# 	if label[pos] == 'B' or label[pos] == 'C':
				# 		controller.delay(1).nodes(nodes[jj]).net.create_packetflow_sink('1234', '1', True, 'wlan0')

				# socket_command = start_command_connection()
				# poller = zmq.Poller()
				# poller.register(socket_command, flags=zmq.POLLIN)
				EXPERIMENT_DURATION = 30000000
				dt = 0
				while do_run:

					# if tdmaStateChange:
					# 	if tdmaState == "ENABLE":
					# 		position = '2'
					# 	elif tdmaState == "DISABLE":
					# 		position = '1'
					# 	else:
					# 		tdmaStateChange = False
					# 		continue
					#
					# 	tdmaStateChange = False
					# 	for jj in range(0, len(nodes)):
					# 		pos = eth_ip.index(nodes[jj].ip)
					# 		if role[pos] == "STA":
					# 			UPIargs = {'position': position, 'interface': 'wlan0'}
					# 			rvalue = controller.nodes(nodes[jj]).radio.activate_radio_program(UPIargs)
					# 			if rvalue != SUCCESS:
					# 				log.warning('Error in radio program activation')
					# 				return
					# 			else:
					# 				log.warning('Radio program activation successful')

					if lteStateChange:
						if lteState == "ENABLE":

							parsed_json = {'src': 'A', 'value': 2000, 'type': 'traffic', 'command': 'set_traffic', 'dst': 'B'}

							# source
							print("SRC")
							node = parsed_json['src']
							node_src_index = all_nodes.index(node)
							controller.delay(1).node(nodes[node_src_index]).radio.activate_radio_program('ENB')
							# iperf -c 127.0.0.1 -p 2000 -i 1 -t 10000
							# controller.delay(1).nodes(nodes[node_src_index]).net.start_packetflow("127.0.0.1", "2000", "3000", 0, '1470')

							gevent.sleep(50)

							# destination
							# print("DST")

							# node = parsed_json['dst']
							# node_dst_index = all_nodes.index(node)
							# controller.delay(1).node(nodes[node_dst_index]).radio.activate_radio_program('UE')

						elif lteState == "DISABLE":
							#off LTE network
							parsed_json = {'src': 'A', 'dst': 'B', 'type': 'traffic', 'command': 'off_traffic'}

							# destination
							# print("DST")

							# node = parsed_json['dst']
							# node_dst_index = all_nodes.index(node)
							# controller.node(nodes[node_dst_index]).radio.deactivate_radio_program('UE')

							# source
							node = parsed_json['src']
							#print(node)
							node_src_index = all_nodes.index(node)
							#print(node_src_index)
							# controller.nodes(nodes[node_src_index]).net.stop_packetflow()
							controller.node(nodes[node_src_index]).radio.deactivate_radio_program('ENB')




						else:
							lteStateChange = False
							continue
						lteStateChange = False


						# socket_list = poller.poll(1000)
					# if socket_list:
					#     for socket_info in socket_list:
					#         if socket_info[1] == zmq.POLLIN:
					#             parsed_json = socket_command.recv_json()
					#             print('parsed_json : %s' % str(parsed_json))
					#             type = parsed_json['type']
					#
					#             if type == 'traffic':
					#                 node = parsed_json['src']
					#                 node_src_index = all_nodes.index(node)
					#                 command = parsed_json['command']
					#                 nodes_source_rate[node_src_index] = 0
					#                 if command == 'off_traffic':
					#                     # if off traffic is selected for a specific node
					#                     # call UPI to stop traffic on node
					#                     controller.nodes(nodes[node_src_index]).net.stop_packetflow()
					#                     if node == 'D':
					#                         #off LTE network
					#                         controller.node(nodes[node_src_index]).radio.deactivate_radio_program('ENB')
					#                         pass
					#                     else:
					#                         pass
					#
					#                 # if start traffic is selected for a specific node
					#                 if command == 'set_traffic':
					#                     node = parsed_json['dst']
					#                     node_dst_index = all_nodes.index(node)
					#                     value = parsed_json['value']
					#                     nodes_source_rate[node_src_index] = value
					#                     source_rate = float(nodes_source_rate[node_src_index])
					#                     # call UPI to start traffic
					#                     if node == 'E':
					#                         controller.node(nodes[node_src_index]).radio.activate_radio_program('ENB')
					#                         gevent.sleep(5)
					#                         # controller.delay(1).nodes(nodes[node_src_index]).net.start_packetflow("127.0.0.1", "2000", '3000', str(value), '1470')
					#                     else:
					#                         controller.delay(1).nodes(nodes[node_src_index]).net.start_packetflow(wlan_ip[node_dst_index], '1234', '3000', str(value) + 'K', '1470')
					if not (dt % 10):
						log.warning('waiting for ... (%d sec / %d)' % (dt, EXPERIMENT_DURATION))
					dt += 1
					gevent.sleep(1)
					# time.sleep(1)
					if dt > EXPERIMENT_DURATION:
						break

			do_run = False
			# for jj in range(0, len(nodes)):
			# 	controller.nodes(nodes[jj]).net.stop_packetflow()

			for ii in range(0, len(nodes)):
				try:
					# controller.nodes(nodes[ii]).net.destroy_packetflow_sink()

					if lcpDescriptor_nodes[ii]:
						lcpDescriptor_nodes[ii].close()
					print("Terminate remote local control program")

					time.sleep(1)

					if reading_thread[ii]:
						reading_thread[ii].do_run = False
						reading_thread[ii].join()
					print("Terminate receive thread")

				except:
					print('Error in %s local control program shutdown' % str(nodes[ii].ip))

			# meas_collector.save_measurements(nodes=wifinodes, directory="experiment_data")


	# # We expect two agents (tx and rx).
	# # Observation: we dont check if the agents connectict are in fact the ones that we want.
	# while len(nodes) < TOTAL_NODES:
	#     print('-- Nodes connected: {}/{}'.format(len(nodes), TOTAL_NODES))
	#     gevent.sleep(2)
	#
	# print("All nodes connected. Starting Simple Experiment of wishful srs")
	#
	# running_enb = False
	# #running_enb = controller.node(nodes[0]).radio.get_running_radio_program()
	# if running_enb is False:
	#     print('\t- Starting program at TX Agent')
	#     controller.node(nodes[0]).radio.set_parameters({'IS_UE':False})
	#     controller.node(nodes[0]).radio.set_parameters({'FREQ': 2437000000})
	#
	#     # controller.node(nodes[0]).radio.set_parameters({'RF_AMP': 0.8})
	#     controller.node(nodes[0]).radio.set_parameters({'RF_AMP': 0.7})
	#
	#     # controller.node(nodes[0]).radio.set_parameters({'GAIN': 20})
	#     controller.node(nodes[0]).radio.set_parameters({'GAIN': 120})
	#
	#     #controller.node(nodes[1]).radio.set_parameters({'NO_OF_FRAMES': 100000})
	#     controller.node(nodes[0]).radio.set_parameters({'NO_OF_PRBS': 25})
	#     controller.node(nodes[0]).radio.set_parameters({'WHICH_PRBS': 0xFFFF})
	#
	#     # controller.node(nodes[0]).radio.set_parameters({'MCS': 1})
	#     controller.node(nodes[0]).radio.set_parameters({'MCS': 28})
	#
	#     # set any static  parameters needed to be set here for the ENB
	#     controller.node(nodes[0]).radio.activate_radio_program('ENB')
	# else:
	#     print('\t Agent TX is already running something. Please stop it first')
	#
	# # gevent.sleep(10)
	# # running_ue = False
	# # running_ue = controller.node(nodes[1]).radio.get_running_radio_program()
	# # if running_ue is False:
	# #     print('\t- Starting program at RX Agent')
	# #     # set any static  parameters needed to be set here for the UE
	# #     controller.node(nodes[1]).radio.set_parameters({'IS_UE':True})
	# #     controller.node(nodes[1]).radio.set_parameters({'FREQ': 2410000000})
	# #     controller.node(nodes[1]).radio.set_parameters({'GAIN': 30})
	# #     controller.node(nodes[1]).radio.set_parameters({'NO_OF_ANTENNAS': 1})
	# #     controller.node(nodes[1]).radio.set_parameters({'EQUALIZER_MODE': 'mmse'})
	# #     controller.node(nodes[1]).radio.set_parameters({'MAX_TURBO_ITS': 3})
	# #     controller.node(nodes[1]).radio.set_parameters({'NOISE_EST_ALG': 0})
	# #     controller.node(nodes[1]).radio.set_parameters({'MAX_TURBO_ITS': 3})
	# #     controller.node(nodes[1]).radio.set_parameters({'SSS_ALGORITHM': 1})
	# #     controller.node(nodes[1]).radio.set_parameters({'SNR_EMA_COEFF': 0.1})
	# #     controller.node(nodes[1]).radio.set_parameters({'CFO_TOL': 50})
	# #     #now that our parameters are set we can start our radio, these parameters have default values so they do not HAVE to be set
	# #     controller.node(nodes[0]).radio.activate_radio_program('UE')
	# # else:
	# #     print('\t Agent RX is already running something. Please stop it first')
	# # gevent.sleep(20)
	# # the following logic ensures the transmitter and receiver are on the same frequency
	# # vals = controller.node(nodes[0]).radio.get_parameters(['FREQ'])
	# # initial_cf_enb = vals['FREQ']
	# # if initial_cf_enb != initial_cf_ue:
	# #     controller.node(nodes[0]).radio.set_parameters({'FREQ': initial_cf_enb})
	# # gevent.sleep(10)
	# # meas = controller.node(nodes[0]).radio.get_measurements({'SNR'})
	# # snr = meas['SNR']
	# # print ('\t snr is \n', snr)
	# # gevent.sleep(2)
	# # if snr < 10:
	# #     controller.node(nodes[1]).radio.set_parameters({'GAIN': 20})
	# #
	# #
	# # gevent.sleep(5)
	# # meas  =  controller.node(nodes[0]).radio.get_measurements({'PDSCH_MISS'})
	# # pdsch_miss = meas['PDSCH_MISS']
	# # print ('\t pdsch_miss is \n',pdsch_miss)
	# # gevent.sleep(2)
	# # if pdsch_miss < 5:
	# #     param = controller.node(nodes[1]).radio.get_parameters(['MCS'])
	# #     mcs = param['MCS']
	# #     controller.node(nodes[1]).radio.set_parameters({'MCS': mcs + 2})
	# #
	# # gevent.sleep(30)
	# #
	# # meas = controller.node(nodes[0]).radio.get_measurements({'N_FRAMES'})
	# # n_frames = meas['N_FRAMES']
	# # print ('\t n_frames received  is \n', n_frames)
	# #
	# # controller.node(nodes[0]).radio.deactivate_radio_program('UE')
	# # controller.node(nodes[1]).radio.deactivate_radio_program('ENB')



if __name__ == "__main__":

	try:
		from docopt import docopt
	except:
		print("""
		Please install docopt using:
			pip install docopt==0.6.1
		For more refer to:
		https://github.com/docopt/docopt
		""")
		raise

	args = docopt(__doc__, version=__version__)
	log_level = logging.INFO  # default
	if args['--verbose']:
		log_level = logging.DEBUG
	elif args['--quiet']:
		log_level = logging.ERROR

	logfile = None
	if args['--logfile']:
		logfile = args['--logfile']

	logging.basicConfig(filename=logfile, level=log_level,
		format='%(asctime)s - %(name)s.%(funcName)s() - %(levelname)s - %(message)s')

	try:
		main(args)
		print('end main')
	except KeyboardInterrupt:
		log.debug("Controller exits")
	finally:
		log.debug("Exit")
		# controller.stop()
