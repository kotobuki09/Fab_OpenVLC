#!/usr/bin/env python
"""
#  b43 firmware state dumper
#
#  Copyright (C) 2008 Michael Buesch <mb@bu3sch.de>
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License version 3
#  as published by the Free Software Foundation.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""
import getopt
import sys
import os
import re
import time
from datetime import datetime
from sys import stdout
from tempfile import *
import csv
import StringIO
import json
import inspect
import zmq
import numpy as np
from b43_library.libb43 import *

B43_SHM_SHARED		= 1

class B43Exception(Exception):
	pass

def usage():
	print "b43 firmware state dumper"
	print ""
	print "Usage: b43-fwdump [OPTIONS]"
	print ""
	print "-h|--help            Print this help text"
	print "-p|--pause TIME      Time in seconds for pausing."
	return

def parseArgs():
	global pause

	pause=0.0;

	try:
		(opts, args) = getopt.getopt(sys.argv[1:],
			"hp:",
			[ "help", "pause="])
	except getopt.GetoptError:
		usage()
		sys.exit(1)

	for (o, v) in opts:
		if o in ("-h", "--help"):
			usage()
			sys.exit(0)
		if o in ("-p", "--pause"):
			if v != "":
				pause = float(v)
	return

def shmRead32(f_shm32read, routing, offset):
	"""Do a 32bit SHM read"""
	try:
		f_shm32read.seek(0)
		f_shm32read.write("0x%X 0x%X" % (routing, offset))
		f_shm32read.flush()
		f_shm32read.seek(0)
		val = f_shm32read.read()
	except IOError, e:
		print "Could not access debugfs file %s: %s" % (e.filename, e.strerror)
		raise B43Exception
	return int(val, 16)

def shmSharedRead(f_shm32read):
	"""Returns a string containing the SHM contents."""
	ret = ""
	for i in range(256, 286, 4):
		val = shmRead32(f_shm32read, B43_SHM_SHARED, i)
		ret += "%c%c%c%c" %	(val & 0xFF,
					 (val >> 8) & 0xFF,
					 (val >> 16) & 0xFF,
					 (val >> 24) & 0xFF)
	return ret

def debugfs_find():
	mtab = file("/etc/mtab").read().splitlines()
	regexp = re.compile(r"^[\w\-_]+\s+([\w/\-_]+)\s+debugfs")
	path = None
	for line in mtab:
		m = regexp.match(line)
		if m:
			path = m.group(1)
			break
	if not path:
		print "Could not find debugfs in /etc/mtab"
		raise B43Exception
	return path

def main():
	
	parseArgs()
	b43_phy = None
	b43 = B43(b43_phy)
	reading_port = "8901"
	context = zmq.Context()
	socket_zmq = context.socket(zmq.PUB)
	socket_zmq.bind("tcp://*:%s" % reading_port)

	writeFile = False
	outDebug = False

	out = StringIO.StringIO()
	err = StringIO.StringIO()

	#reg = {'104' '106' '108' '10A' '10C' '10E' '110' '112' '11E' '100'}; % '102'};
	#reg = {'104' '106' '108' '10A' '10C' '110' '112' '11E' '100'}; % '102'};

	#leg = {'Too Long' 'Too Short' 'Invalid MAC Header' 'Bad FCS' 'Bad PLCP'...
	#		 % 'Preamble OK, bad Header' 'Good PLCP' 'Good FCS, matching RA' 'Good FCS, not matching RA' 'Busy Time'};

	#leg = {'Too Long' 'Too Short' 'Invalid MAC Header' 'Bad FCS' 'Bad PLCP'...
	#'bad Header' 'Good PLCP' 'Good FCS, matching RA' 'Good FCS, not matching RA' 'Busy Time'};

	# ['Too-Long', 'Invalid-MAC-Header', 'Bad-FCS', 'Bad-PLCP', 'Good-PLCP', 'Good-FCS,not-matching-RA']
	# fieldnames = ['tsfStart' '100' '102' '104' '106' '108' '10A' '10C' '10E' '110' '112' '114' '116' '118' '11A' '11C' '11E' 'tsfDeltaSec' 'tsfDeltaus']
	# too - long --> 104 --> 3
	# Invalid - MAC - Header --> 108 --> 5
	# Bad - FCS --> 10A --> 6
	# Bad - PLCP --> 10C --> 7
	# Good - PLCP --> 9
	# Good - FCS, not -matching - RA --> 16

	# define BUSY_TIME				SHM(0x0100)
	# define ERROR_SANSE_STATE		SHM(0x0102)
	# define RX_TOO_LONG_COUNTER 		SHM(0x0104)		// RX Too Long (Limit is 2346 bytes)
	# define RX_TOO_SHORT_COUNTER 		SHM(0x0106)		// RX Too Short (Not enough bytes for frame type)
	# define INVALID_MACHEADER_COUNTER 	SHM(0x0108)   		// RX Invalid MAC Header (Either Protocol Version is not 0, or the frame type isn't Data, Control or Management)
	# define BAD_FCS_COUNTER 		SHM(0x010A)		// RX Bad FCS (Frames where CRC Failed)
	# define BAD_PLCP_COUNTER		SHM(0x010C)		// RX Bad PLCP (Parity Check of PLCP Header Failed)
	# define GOOD_PLCP_COUNTER		SHM(0x0110)		// RX Frames with good PLCP
	# define GOOD_FCS_MATCH_RA_COUNTER	SHM(0x0112)		// RX Data "Frames" with Good FCS and Matching RA //non sono solo data frame ma tutti i frame
	# define GOOD_FCS_NO_MATCH_RA_COUNTER	SHM(0x011E)		// RX Data "Frames" with Good FCS and not matching RA //non sono solo data frame ma tutti i frame

	fieldnames = ['tsfStart' '100' '102' '104' '106' '108' '10A' '10C' '10E' '110' '112' '114' '116' '118' '11A' '11C' '11E' 'tsfDeltaSec' 'tsfDeltaus']
	# [1513332326460587.2, 1591.32, 0.0,  0.0, 0.0,  0.0,  1.03,  0.0, 0.0,  -36.07, 0.0, 0.0, 0.0,  0.0, 0.0,  0.0,  1753.52, 0.0, 1888.88]

	if writeFile:
		file_name = "log"
		out_file = open(file_name + '.csv', "wb")

	print("Starting error reading...")
	tsStart = datetime.now()
	tsStop = tsStart
	tsLastProcess = tsStart
	errors = []
	row_index = 0

	event_wifi_number_1 = 0; event_zigbee_number_1 = 0; event_other_number_1 = 0; event_wifi_number_2 = 0; event_lte_number_2 = 0; event_other_number_2 = 0
	sending_number  = 0
	num_reading = 0
	errorsMeanListOld = np.zeros((1,19))
	errorsMeanListOld = errorsMeanListOld.tolist()[0]

	reading_time = time.time()
	local_starttime = reading_time
	reading_interval = 0.1
	column_old = []
	val_incremental_old = [0,0,0,0,0,0,0,0,0,0,0,0,0]
	val_incremental_old_busy = 0

	errorsMatrix = []
	while True:
		column = []
		tsStart=datetime.now()
		# stdout.write("\n%s," % tsStart.strftime('%s%f'))
		outString = tsStart.strftime('%s%f') + ","
		column.append(int(tsStart.strftime('%s%f')))
		erroIndex = 0

		for i in range(256, 286, 4):
			if i == 256:
				# read busy from physical register
				val_incremental = b43.read16(b43.B43_MMIO_IFSMEDBUSYCTL)
				val = val_incremental - val_incremental_old_busy
				if val<0:
					val = (65535 - val_incremental_old_busy) + val_incremental
				val_incremental_old_busy = val_incremental
				outString = outString + str(val) + ",0,"
				column.append(val)
				column.append(0)
			# print(column[1])
			elif i == 276 or i == 280:
				outString = outString + "0,0,"
				column.append(0)
				column.append(0)
			else:
				val = b43.shmRead32(b43.B43_SHM_SHARED, i)
				# outString = outString + str((val & 0x00FF) + ((val & 0xFF00))) + "," + str(((val >> 16) & 0x00FF) + ((val >> 16) & 0xFF00)) + ","
				# column.append((val & 0x00FF) + ((val & 0xFF00)))
				# column.append(((val >> 16) & 0x00FF) + ((val >> 16) & 0xFF00))
				error1 = ((val & 0x00FF) + ((val & 0xFF00)))
				val1 = error1 - val_incremental_old[erroIndex]
				if val1 < 0:
					val1 = (65535 - val_incremental_old[erroIndex]) + error1
				val_incremental_old[erroIndex] = error1
				erroIndex += 1

				error2 = (((val >> 16) & 0x00FF) + ((val >> 16) & 0xFF00))
				val2 = error2 - val_incremental_old[erroIndex]
				if val2 < 0:
					val2 = (65535 - val_incremental_old[erroIndex]) + error2
				val_incremental_old[erroIndex] = error2
				erroIndex += 1

				outString = outString + str(val1) + "," + str(val2) + ","
				column.append(val1)
				column.append(val2)

		# tsStop=datetime.now();
		diff = tsStart - tsStop
		tsStop = tsStart
		# stdout.write("%s,%d,%d" %(tsStop.strftime('%s%f'), diff.seconds,  diff.microseconds ) )
		# outString = outString + str(tsStop.strftime('%s%f')) + "," + str(diff.seconds) + "," + str(diff.microseconds) + "\n"
		outString = outString + str(diff.seconds) + "," + str(diff.microseconds) + "\n"
		if writeFile:
			out_file.write(outString)
		if outDebug:
			stdout.write(outString)

		column.append(diff.seconds)
		column.append(diff.microseconds)
		errors.append(column)

		diff = tsStop - tsLastProcess
		if diff.microseconds > 100000:
		# if diff.seconds >= 1:
		# 	print(errors[0])
			errorsVector = []
			currentErrorsMatrix = np.array(errors)
			errorSum = currentErrorsMatrix.sum(axis=0) #we not consider the 16 bit register issue
			errorMean = currentErrorsMatrix.mean(axis=0)
			errorSumList = errorSum.tolist()
			errorMeanList = errorMean.tolist()
			# fieldnames = ['tsfStart' '100' '102' '104' '106' '108' '10A' '10C' '10E' '110' '112' '114' '116' '118' '11A' '11C' '11E' 'tsfDeltaSec' 'tsfDeltaus']
			for ii in range(0,len(errorSumList)):
				# print(round(errorSumList[ii],2))
				if ii == 0 or ii == 17 or ii == 18 :
					time_error = round(errorMeanList[ii], 2)
					errorsVector.append(time_error)
				elif ii == 1:
					time_error = round(errorMeanList[ii], 2)
					errorsVector.append(time_error)
				else:
					sum_error = round(errorSumList[ii],2)
					errorsVector.append( sum_error )
			errorsMatrix.append(errorsVector)
			tsLastProcess = datetime.now()
			num_reading += 1
			if num_reading==10:
			# if True:
				print('new error processing')
				message = {"measure": errorsMatrix}
				# print("%d - %s" % (sending_number, str(message)))
				print(errorsMatrix[0])
				socket_zmq.send_json(message)
				errorsMatrix = []
				sending_number += 1
				num_reading = 0

			errors = []

		# time.sleep(reading_interval - ((time.time() - local_starttime) % reading_interval))

		# diff = tsStop - tsLastProcess
		# if diff.seconds > 80:
		# 	break

	return


try:
	main()
except B43Exception:
	sys.exit(1)
