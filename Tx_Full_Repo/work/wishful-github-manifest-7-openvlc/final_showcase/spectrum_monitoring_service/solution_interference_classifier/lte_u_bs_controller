#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
WiSHFUL Final Showcase: Warm-up phase - Overlapping BSS Management

Usage:
   controller [options] [-q | -v]

Options:
   --logfile name        Name of the logfile
   --config configFile   Config file path
   --ad_address ipAddress IP address of AD controller

Example:
   ./controller -v --config ./config.yaml 

Other options:
   -h, --help          show this help message and exit
   -q, --quiet         print less text
   -v, --verbose       print more text
   --version           show version and exit
"""

import sys
# get access to lib dir
sys.path.append('../')
sys.path.append('../../')

import os
import subprocess
import time
import datetime
import logging
import wishful_controller
import gevent
import yaml
import wishful_upis as upis
from lib.global_controller_proxy import GlobalSolutionControllerProxy
from lte_u_synch.ltfi_enb_manager import LtFiEnbManager

__author__ = "Piotr Gawlowicz"
__copyright__ = "Copyright (c) 2018, Technische UniversitÃ¤t Berlin"
__version__ = "0.1.0"
__email__ = "gawlowicz@tkn.tu-berlin.de"


log = logging.getLogger('wishful_agent.main')
controller = wishful_controller.Controller()
bsEnabled = True
lteuFreq = None
nodes = []

srsLteEnbPath = "/home/piotr/demo/pdsch_enodeb_lteu -g 100 -p 100 -f 2412e6"
srsLteEnbProcess = None

# LTE-U Manager
srsLteEnbUri = "tcp://127.0.0.1:5555"
lteuCycleTime = 40
lteuOnTime = 10

eNbManager = LtFiEnbManager(srsLteEnbUri)
eNbManager.set_cycle_duration(lteuCycleTime)
eNbManager.set_ontime_duration(lteuOnTime)


def start_bs(args):
    print("Start LTE-U BS")
    global bsEnabled
    global srsLteEnbProcess
    global eNbManager
    global lteuFreq
    bsEnabled = True

    newFreq = 2412  # channel 1
    if args:
        newFreq = args.get("freq", newFreq)

    lteuFreq = newFreq
    if srsLteEnbProcess is None:
        cmd = ['/home/piotr/demo/pdsch_enodeb_lteu']
        cmd.extend(['-g', '100'])  # tx gain 100
        cmd.extend(['-p', '100'])  # number of RBs 100->20MHz
        cmd.extend(['-f', '2412e6'])  # central freq

        srsLteEnbProcess = subprocess.Popen(cmd)

        time.sleep(5)
        eNbManager.start_tx()
        eNbManager.set_rf_freq(newFreq)


def stop_bs(args):
    print("Stop LTE-U BS")
    global bsEnabled
    global srsLteEnbProcess
    global eNbManager
    global lteuFreq
    bsEnabled = False

    lteuFreq = None
    if srsLteEnbProcess:
        cmd = ['/bin/kill']
        cmd.extend(['-9'])
        cmd.extend([str(srsLteEnbProcess.pid)])
        subprocess.Popen(cmd)
        srsLteEnbProcess = None


def set_freq(args):
    global bsEnabled
    global srsLteEnbProcess
    global eNbManager
    global lteuFreq

    newFreq = 2437  # channel 6
    if args:
        newFreq = args.get("freq", newFreq)

    print("Change LTE-U BS central frequency to :", newFreq)
    lteuFreq = newFreq

    if srsLteEnbProcess and bsEnabled:
        eNbManager.set_rf_freq(newFreq)


def main(args):
    global controller
    global bsEnabled
    global lteuFreq

    log.debug(args)

    config_file_path = args['--config']
    config = None
    with open(config_file_path, 'r') as f:
        config = yaml.load(f)

    # Load controller script parameters
    parameters = config.get("parameters", None)
    if parameters:
        controllerName = parameters.get("controllerName", None)
        ad_address = parameters.get("ad_address", "127.0.0.1")

    if args['--ad_address']:
        ad_address = args['--ad_address']

    controller.load_config(config)
    controller.start()

    solutionCtrProxy = GlobalSolutionControllerProxy(ip_address=ad_address,
                                                     requestPort=7001,
                                                     subPort=7000)

    networkName = [controllerName]
    networkType = 'LTE_U'
    solutionName = ["Non_WiSHFUL_LTE_U_BS"]
    commands = {"ACTIVATE": start_bs,
                "DEACTIVATE": stop_bs,
                "SET_FREQ": set_freq,
                }
    monitorList = []
    solutionCtrProxy.set_solution_attributes(controllerName,
                                             networkType,
                                             solutionName,
                                             commands,
                                             monitorList
                                             )

    # Register OBSS_Management solution to global solution controller
    response = solutionCtrProxy.register_solution()
    if response:
        print("Solution was correctly registered to GlobalSolutionController")
        solutionCtrProxy.start_command_listener()
    else:
        print("Solution was not registered to Global Solution Controller")

    channelToFreq = {1: 2412,
                     2: 2417,
                     3: 2422,
                     4: 2427,
                     5: 2432,
                     6: 2437,
                     7: 2442,
                     8: 2447,
                     9: 2452,
                     10: 2457,
                     11: 2462,
                     12: 2467,
                     13: 2472,
                     14: 2484,
                     }

    freqToChannel = {v: k for k, v in channelToFreq.items()}

    # control loop
    while True:
        gevent.sleep(1)

        # Notify channel usage
        value = {"channels" : [],
                 "frequencies": []
                 }

        if bsEnabled and lteuFreq:
            channels = []
            channel = freqToChannel.get(lteuFreq, None)
            if channel:
                channels = [channel]

            frequencies = {lteuFreq : 20}

            value = {"channels" : channels,
                     "frequencies": frequencies
                     }

        # print("Notify AD controller about used channels", channels)
        solutionCtrProxy.send_monitor_report('channelUsage', networkType, value)


if __name__ == "__main__":
    try:
        from docopt import docopt
    except:
        print("""
        Please install docopt using:
            pip install docopt==0.6.1
        For more refer to:
        https://github.com/docopt/docopt
        """)
        raise

    args = docopt(__doc__, version=__version__)

    log_level = logging.INFO  # default
    if args['--verbose']:
        log_level = logging.DEBUG
    elif args['--quiet']:
        log_level = logging.ERROR

    logfile = None
    if args['--logfile']:
        logfile = args['--logfile']

    logging.basicConfig(filename=logfile, level=log_level,
        format='%(asctime)s - %(name)s.%(funcName)s() - %(levelname)s - %(message)s')

    try:
        main(args)
    except KeyboardInterrupt:
        log.debug("Controller exits")
    finally:
        log.debug("Exit")
        controller.stop()
