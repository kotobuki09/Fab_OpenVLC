#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Usage:
   controller [options] [-q | -v | -n]

Options:
   --logfile name       Name of the logfile
   --config configFile Config file path

Example:
   ./

Other options:
   -h, --help            show this help message and exit
   -q, --quiet           print less text
   -v, --verbose         print more text
   -n, --novisualizer    do not start visualizer communication
   --version             show version and exit
"""

__author__ = "Domenico Garlisi, ...."
__copyright__ = "Copyright (c) ..., "
__version__ = "0.1.0"
__email__ = "domenico.garlisi@cnit.it; ..."

import time
import threading
import datetime
import logging
import sys
import os
import yaml
import zmq
import json
import struct  # for packing integers

# Overlapping BSS Management - AD logic
from obss_manager import ObssManager

sys.path.append('../')
sys.path.append('../../')
from lib.kvsimple import KVMsg
from lib.zhelpers import zpipe

log = logging.getLogger('wishful_agent.main')

# clear = lambda: os.system('cls')
clear = lambda: os.system('clear')
do_run = True
solutionCompatibilityMatrix = []
socket_visualizer = None
startVisualizer = True

# Overlapping BSS Management - AD logic
obssManager = ObssManager()

# Management function for 6lowpan (zigbee)
from sicslowpan_manager import SICSLOWPANNetwork

sicslowpanManager = SICSLOWPANNetwork()


###############################
######## GUI related ##########
###############################
class Network:
	"""
    Structure to store network information
    """
	id = 0
	name = None
	solution = None
	commandList = None
	# eventList = None
	solutionCompatibilityList = None
	channels = [11]
	frequencies = {}
	load = "[]"
	active = True

	def __init__(self, id, name, networkType, solution, commandList=None, monitorList=None, solutionCompatibilityList=None):
		self.id = id
		self.name = name
		self.networkType = networkType
		self.solution = solution
		self.commandList = commandList
		# self.eventList = eventList
		self.monitorList = monitorList
		self.solutionCompatibilityList = solutionCompatibilityList

	def update_channel(self, channel_information):
		"""
        Update the used channels for this network
        :param channel: new channel
        """
		self.channels = channel_information["channels"]
		self.frequencies = channel_information["frequencies"]

	def update_load(self, load):
		"""
        Update the load for the current network
        :param load: new load
        """
		self.load = load


###############################
######## GUI related ##########
###############################
def start_visualizer_connection(webui_ip_address):
	"""
    ****    SETUP LOG GUI VISUALIZER    ****
    This function is used to setup the connection with the experiment webui,
    a ZMQ socket client is created on port 5506, able to send statistical information to GUI
    """
	socket_visualizer_port = "5506"
	ctx = zmq.Context()
	socket_visualizer = ctx.socket(zmq.PUB)
	socket_visualizer.connect("tcp://%s:%s" % (webui_ip_address, socket_visualizer_port))
	print("Connecting to server %s on port %s ... ready to send information to experiment WEBUI" % (webui_ip_address, socket_visualizer_port))

	return socket_visualizer


def forward_lines(stream, socket):
	"""Read lines from `stream` and send them over `socket`."""
	try:
		line = stream.readline()
		while line:
			socket.send(line[:-1].encode('utf-8'))
			line = stream.readline()
		socket.send(''.encode('utf-8'))  # send eof message.
	finally:
		socket.close()


def forward_standard_input(context):
	"""Start a thread that will bridge the standard input to a 0MQ socket and
    return an exclusive pair socket from which you can read lines retrieved
    from the standard input.  You will receive a final empty line when the EOF
    character is input to the keyboard."""
	reader = context.socket(zmq.PAIR)
	reader.connect('inproc://standard-input')
	writer = context.socket(zmq.PAIR)
	writer.bind('inproc://standard-input')
	stdin_thread = threading.Thread(target=forward_lines, args=(sys.stdin, writer))
	stdin_thread.start()
	return [reader, stdin_thread]


def send_status_update(socket_visualizer):
	nsu = []
	for network in solutionCompatibilityMatrix:
		nsu.append({
			"name": network.name,
			"type": network.networkType,
			"channel": str(network.channels),
			"load": network.load,
			"active": True,
		})
	socket_visualizer.send_multipart([
		b'networkStatusUpdate',
		json.dumps(nsu).encode('utf-8'),
	])

def send_spectrum_update(socket_visualizer, spectrum_message):
	socket_visualizer.send_multipart([
		b'specStatusUpdate',
		json.dumps(spectrum_message).encode('utf-8'),
	])

def send_spectrum_update_2(socket_visualizer, spectrum_message):
	socket_visualizer.send_multipart([
		b'specStatusUpdate_2',
		json.dumps(spectrum_message).encode('utf-8'),
	])

def send_error_monitoring_update(socket_visualizer, spectrum_message):
	socket_visualizer.send_multipart([
		b'errorStatusUpdate',
		json.dumps(spectrum_message).encode('utf-8'),
	])

def send_spectrum_features_update(socket_visualizer, spectrum_message):
	socket_visualizer.send_multipart([
		b'spectralScanFeatures',
		json.dumps(spectrum_message).encode('utf-8'),
	])


########################################
######## COMMAND LINE related ##########
########################################

def print_log(logString):  ## Your menu design here
	if logString == "START":
		print(30 * "-", "LOG", 30 * "-")
	elif logString == "STOP":
		print(67 * "-")
	else:
		print(logString)
	return


def print_menu():  ## Your menu design here
	print(30 * "-", "MAIN MENU", 30 * "-")
	print("1. Print registered solutions")
	print("2. Send command")
	print("3. Active phases")
	print("0. Quit")
	print(67 * "-")
	print("Enter your choice >>  ")


def print_solutions():
	global solutionCompatibilityMatrix
	if len(solutionCompatibilityMatrix) > 0:
		networkIndex = 1
		print("Network list:")
		for network in solutionCompatibilityMatrix:
			print(str(network.id) + " :")
			print("     " + str(network.name))
			print("     " + str(network.commandList))
			networkIndex += 1
	print(67 * "-")
	print("0. BACK")
	print(67 * "-")
	print("Press 0 to BACK")
	while True:
		try:
			items = dict(poller.poll())
		except (zmq.ZMQError, KeyboardInterrupt):
			return

		if items.get(reader, 0) & zmq.POLLIN:
			line = reader.recv()
			break
		else:
			continue
	clear()
	return


def print_menu_command():  ## Your menu design here
	global poller
	global reader
	global sequence_publisher
	global publisher
	global socket_visualizer
	global obssManager
	global startVisualizer

	# Command menu (choice of network)
	print(30 * "-", "COMMAND MENU", 30 * "-")
	if len(solutionCompatibilityMatrix) > 0:
		print("Network list:")
		for network in solutionCompatibilityMatrix:
			print("     " + str(network.id) + " :" + str(network.name))
	print("0. BACK")
	print(67 * "-")
	print("insert network number : ")

	# Poll for input on network choice:
	while True:
		try:
			items = dict(poller.poll())
		except (zmq.ZMQError, KeyboardInterrupt):
			return

		if items.get(reader, 0) & zmq.POLLIN:
			line = reader.recv()
			break
		else:
			continue

	# Parse the selected network:
	network_choice = line.decode("utf-8").lower()
	if network_choice == '':
		return
	else:
		try:
			networkIndex = int(network_choice)
			selected_network = next((x for x in solutionCompatibilityMatrix if x.id == networkIndex), None)
		except KeyError:
			print("Invalid selection, please try again.\n")
			return

	# Pass the commands of the network to the output:
	for command_index in range(0, len(selected_network.commandList)):
		print("     " + str(command_index) + " :" + str(selected_network.commandList[command_index]))
	print("insert command number : ")

	while True:
		try:
			items = dict(poller.poll())
		except (zmq.ZMQError, KeyboardInterrupt):
			return
		if items.get(reader, 0) & zmq.POLLIN:
			line = reader.recv()
			break
		else:
			continue

	command_choice = line.decode("utf-8").lower()
	if command_choice == '':
		return
	else:
		try:
			commandIndex = int(command_choice)
		except KeyError:
			print("Invalid selection, please try again.\n")
			return

	# send command
	commandToSend = selected_network.commandList[commandIndex]

	# Compile the message:
	msg = {
		"type": "publisherUpdate",
		"involvedController": [selected_network.name],
		"commandList": {}
	}

	if commandToSend == "TRAFFIC":
		traffic_load = "HIGH"
		msg["commandList"][selected_network.solution[0]] = {
			"TRAFFIC": {"TYPE": traffic_load}  # OFF, LOW, MEDIUM, HIGH
		}
		selected_network.update_load(traffic_load)
		if startVisualizer:
			send_status_update(socket_visualizer)
	else:
		if commandToSend == "START_WIFI" or commandToSend == "START_LTE":
			traffic_load = "HIGH"
		if commandToSend == "STOP_WIFI" or commandToSend == "STOP_LTE":
			traffic_load = "OFF"
		if commandToSend == "START_WIFI" or commandToSend == "START_LTE" or commandToSend == "STOP_WIFI" or commandToSend == "STOP_LTE":
			msg["commandList"][selected_network.solution[0]] = {
				"TRAFFIC": {"TYPE": traffic_load}  # OFF, LOW, MEDIUM, HIGH
			}
			selected_network.update_load(traffic_load)
			if startVisualizer:
				send_status_update(socket_visualizer)

		msg["commandList"] = {selected_network.solution[0]: {}}
		# WIFI NETWORK COMMAND
		if commandToSend == "START_WIFI":
			msg["commandList"][selected_network.solution[0]] = {"START_WIFI": {}}
			msg["commandList"][selected_network.solution[0]]["START_WIFI"] = {"2462": True}
		elif commandToSend == "STOP_WIFI":
			msg["commandList"][selected_network.solution[0]] = {"STOP_WIFI": {}}
			msg["commandList"][selected_network.solution[0]]["STOP_WIFI"] = {"2462": False}
		elif commandToSend == "START_TDMA":
			msg["commandList"][selected_network.solution[0]] = {"START_TDMA": {}}
			msg["commandList"][selected_network.solution[0]]["START_TDMA"] = {"2462": False}
		elif commandToSend == "STOP_TDMA":
			msg["commandList"][selected_network.solution[0]] = {"STOP_TDMA": {}}
			msg["commandList"][selected_network.solution[0]]["STOP_TDMA"] = {"2462": False}

		# LTE NETWORK COMMAND
		elif commandToSend == "START_LTE":
			msg["commandList"][selected_network.solution[0]] = {"START_LTE": {}}
			msg["commandList"][selected_network.solution[0]]["START_LTE"] = {"2437": True}
		elif commandToSend == "STOP_LTE":
			msg["commandList"][selected_network.solution[0]] = {"STOP_LTE": {}}
			msg["commandList"][selected_network.solution[0]]["STOP_LTE"] = {"2437": False}

			# 6LOWPAN NETWORK COMMANDS:
		elif network.name == "6lowPAN":
			msg["commandList"][selected_network.solution[0]] = {commandToSend: None}
			if commandToSend == "LTE_WIFI_ZIGBEE":
				msg["commandList"][selected_network.solution[0]] = {"LTE_WIFI_ZIGBEE": True}
			elif commandToSend == "ENABLE_TRAFFIC":
				traffic_load = "High"
				selected_network.update_load(traffic_load)
				if startVisualizer:
					send_status_update(socket_visualizer)
			elif commandToSend == "DISABLE_TRAFFIC":
				traffic_load = "OFF"
				selected_network.update_load(traffic_load)
				if startVisualizer:
					send_status_update(socket_visualizer)

		# TUB WIFI:
		elif selected_network.name in ["WIFI_A1", "WIFI_A2"]:
			if commandToSend == "ACTIVATE":
				msg["commandList"][selected_network.solution[0]] = {"ACTIVATE": {}}

			elif commandToSend == "DEACTIVATE":
				msg["commandList"][selected_network.solution[0]] = {"DEACTIVATE": {}}
				traffic_load = "OFF"
				selected_network.update_load(traffic_load)
				if startVisualizer:
					send_status_update(socket_visualizer)

			elif commandToSend == "TRAFFIC_SET_OFF":
				msg["commandList"][selected_network.solution[0]] = {"TRAFFIC_SET_OFF": {}}
				traffic_load = "OFF"
				selected_network.update_load(traffic_load)
				if startVisualizer:
					send_status_update(socket_visualizer)

			elif commandToSend == "TRAFFIC_SET_LOW":
				msg["commandList"][selected_network.solution[0]] = {"TRAFFIC_SET_LOW": {}}
				traffic_load = "LOW"
				selected_network.update_load(traffic_load)
				if startVisualizer:
					send_status_update(socket_visualizer)

			elif commandToSend == "TRAFFIC_SET_MEDIUM":
				msg["commandList"][selected_network.solution[0]] = {"TRAFFIC_SET_MEDIUM": {}}
				traffic_load = "MEDIUM"
				selected_network.update_load(traffic_load)
				if startVisualizer:
					send_status_update(socket_visualizer)

			elif commandToSend == "TRAFFIC_SET_HIGH":
				msg["commandList"][selected_network.solution[0]] = {"TRAFFIC_SET_HIGH": {}}
				traffic_load = "HIGH"
				selected_network.update_load(traffic_load)
				if startVisualizer:
					send_status_update(socket_visualizer)

			elif commandToSend == "TRAFFIC":
				traffic_load = "HIGH"
				msg["commandList"][selected_network.solution[0]] = {"TRAFFIC": {"TYPE": traffic_load}}
				selected_network.update_load(traffic_load)
				if startVisualizer:
					send_status_update(socket_visualizer)

			elif commandToSend == "SWITCH_CHANNEL":
				msg["commandList"][selected_network.solution[0]] = {"SWITCH_CHANNEL": {"channel": 0}}

		# TUB NON_WISHFUL_LTE_U:
		elif selected_network.name in ["NON_WISHFUL_LTE_U", "Non_WiSHFUL_LTE_U_BS"]:
			if commandToSend == "ACTIVATE":
				msg["commandList"][selected_network.solution[0]] = {"ACTIVATE": {"freq": 2412}}
				traffic_load = "MEDIUM"
				selected_network.update_load(traffic_load)
				if startVisualizer:
					send_status_update(socket_visualizer)
			elif commandToSend == "DEACTIVATE":
				msg["commandList"][selected_network.solution[0]] = {"DEACTIVATE": {}}
				traffic_load = "OFF"
				selected_network.update_load(traffic_load)
				if startVisualizer:
					send_status_update(socket_visualizer)
			elif commandToSend == "SET_FREQ":
				msg["commandList"][selected_network.solution[0]] = {"SET_FREQ": {"freq": 2437}}

		# TCD NB-IoT Virtual
		elif commandToSend == "START_NBIOT":
			msg["commandList"][selected_network.solution[0]] = {"START_NBIOT": {}}
			msg["commandList"][selected_network.solution[0]]["START_NBIOT"] = {"2437": True}
		elif commandToSend == "STOP_NBIOT":
			msg["commandList"][selected_network.solution[0]] = {"STOP_NBIOT": {}}
			msg["commandList"][selected_network.solution[0]]["STOP_NBIOT"] = {"2437": False}


		# No arguments
		else:
			msg["commandList"][selected_network.solution[0]] = {commandToSend: {}}

	if msg:
		print('update message %s' % str(msg))
		# Distribute as key-value message
		# sequence_publisher += 1
		kvmsg = KVMsg(sequence_publisher)
		kvmsg.key = b"generic"
		kvmsg.body = json.dumps(msg).encode('utf-8')
		kvmsg.send(publisher)
		print("sent update information with sequence %d" % sequence_publisher)

		if selected_network.name in ["WIFI_A1", "WIFI_A2"]:
			obssManager.notify_command_msg(msg)

	else:
		print("Malformed message, sending failed")
		print('update message %s' % str(msg))

	print(67 * "-")
	print("Press 0 to BACK")
	while True:
		try:
			items = dict(poller.poll())
		except (zmq.ZMQError, KeyboardInterrupt):
			return

		if items.get(reader, 0) & zmq.POLLIN:
			line = reader.recv()
			break
		else:
			continue
	clear()
	return


def print_menu_phases():  ## Your menu design here
	global poller
	global reader
	global sequence_publisher
	global publisher
	global socket_visualizer
	global obssManager
	global startVisualizer
	global current_phase, state_phase, time_phase, last_time_phase, auto_phase

	# Command menu (choice of network)
	print(30 * "-", "PHASE MENU", 30 * "-")
	for ii in range(4):
		print("%d PHASE" %ii)
	print("4. AUTO PHASE")
	print("5. DEACTIVE ALL")
	print("q. BACK")
	print(67 * "-")
	print("insert phase number to activate: ")

	# Poll for input on network choice:
	while True:
		try:
			items = dict(poller.poll())
		except (zmq.ZMQError, KeyboardInterrupt):
			return

		if items.get(reader, 0) & zmq.POLLIN:
			line = reader.recv()
			break
		else:
			continue

	# Parse the selected network:
	phase_choice = line.decode("utf-8").lower()
	if phase_choice == '' or phase_choice == 'q':
		return
	else:
		try:
			phaseIndex = int(phase_choice)
			# selected_network = next((x for x in solutionCompatibilityMatrix if x.id == networkIndex), None)
		except KeyError:
			print("Invalid selection, please try again.\n")
			return
	if phaseIndex == 0:
		current_phase = 0
		auto_phase = 0
	elif phaseIndex == 1:
		current_phase = 1
		auto_phase = 0
	elif phaseIndex == 2:
		current_phase = 2
		auto_phase = 0
	elif phaseIndex == 3:
		current_phase = 3
		auto_phase = 0
	elif phaseIndex == 4:
		current_phase = 0
		auto_phase = 1
	elif phaseIndex == 5:
		current_phase = -2
		auto_phase = 0
	else:
		print("no phase selected, try to use different number")
	time_phase = 0
	state_phase = 0
	return


def send_command(network_name, solution_name, command, args, args_value):  ## Your menu design here
	global poller
	global reader
	global sequence_publisher
	global publisher
	global socket_visualizer
	global obssManager
	global startVisualizer

	# create command message
	#update message {'type': 'publisherUpdate', 'involvedController': ['6lowPAN'], 'commandList': {'blacklisting': {'ENABLE_TRAFFIC': {}}}}
	msg = {"type": "publisherUpdate", "involvedController": [network_name], "commandList": {}}
	msg["commandList"][solution_name] = {command: {}}
	msg["commandList"][solution_name][command] = {args: args_value}
	if msg:
		print('SEND COMMAND: %s' % str(msg))
		kvmsg = KVMsg(sequence_publisher)
		kvmsg.key = b"generic"
		kvmsg.body = json.dumps(msg).encode('utf-8')
		kvmsg.send(publisher)
		print("sent update information with sequence %d" % sequence_publisher)
	else:
		print("Malformed message, sending failed")
		print('update message %s' % str(msg))
	return


# Exit program
def exit():
	global do_run
	do_run = False


# Menu definition
menu_actions = {
	'1': print_solutions,
	'2': print_menu_command,
	'3': print_menu_phases,
	'0': exit,
}


# Execute menu
def exec_menu(choice):
	clear()
	ch = choice.decode("utf-8").lower()
	if ch == '':
		return
	else:
		try:
			menu_actions[ch]()
		except KeyError:
			print("Invalid selection, please try again.\n")
	return


###################################
########### MAIN LOOP #############
###################################

poller = None
reader = None
sequence_publisher = 0
publisher = None


def main(args):
	global do_run
	global solutionCompatibilityMatrix
	global poller
	global reader
	global sequence_publisher
	global publisher
	global socket_visualizer
	global obssManager
	global startVisualizer
	global current_phase, state_phase, time_phase, last_time_phase, auto_phase

	# Init variables
	kvmap = {}
	networkNum = 0
	sequence_publisher = 0

	if args['--novisualizer']:
		print("Communication with visualizer won't be started")
		startVisualizer = False

	log.info('*******     WISHFUL *************')
	log.info('********  Starting solution global controller ***************')

	# all_nodes = ['B', 'C', 'D', 'E']
	# nodes_source_rate = []

	# Init connection with GUI ffor LOG
	if startVisualizer:
		#socket_visualizer = start_visualizer_connection("10.8.9.14")
		socket_visualizer = start_visualizer_connection("172.16.17.2")

	# Prepare our context and publisher socket
	ctx = zmq.Context()
	poller = zmq.Poller()

	# Init Publisher socket
	publisher = ctx.socket(zmq.PUB)
	publisher.bind("tcp://*:7000")
	updates, peer = zpipe(ctx)

	# Init Request socket
	request = ctx.socket(zmq.ROUTER)
	request.bind("tcp://*:7001")
	poller.register(request, zmq.POLLIN)

	socket_visualizer_command = ctx.socket(zmq.SUB)
	socket_visualizer_command.setsockopt(zmq.SUBSCRIBE, b'commandWiFi')
	socket_visualizer_command.setsockopt(zmq.SUBSCRIBE, b'commandLTE')
	socket_visualizer_command.setsockopt(zmq.SUBSCRIBE, b'commandCooperaiton')
	socket_visualizer_command.setsockopt(zmq.SUBSCRIBE, b'commandDeterministic')
	socket_visualizer_command.setsockopt(zmq.SUBSCRIBE, b'commandWiFiRate')
	socket_visualizer_command.setsockopt(zmq.SUBSCRIBE, b'commandZigBee')

	socket_visualizer_command.bind("tcp://*:5509")
	poller.register(socket_visualizer_command, zmq.POLLIN)

	reader, stdin_thread = forward_standard_input(ctx)
	poller.register(reader, zmq.POLLIN)

	networkNames = []
	networkNames.append("LTE_TDMA")  # 0
	networkNames.append("WIFI_TDMA")  # 1
	networkNames.append("6lowPAN") # 2

	solutionNames = []
	solutionNames.append("LTE_CT")  # 0
	solutionNames.append("WIFI_CT")  # 1
	solutionNames.append("blacklisting")  # 2

	last_time_phase = time.time()
	time_phase = 0
	state_phase = 0
	current_phase = -1
	auto_phase = 0
	cooperation = False
	airtime = 0

	stations = ["WIFI_STA1", "WIFI_STA2", "WIFI_STA3", "WIFI_STA4"]
	cumulative_thr_table = [0.0, 0.0, 0.0, 0.0]
	cmulative_update_num = 0

	clear()
	print_log("START")
	print_log("STOP")
	do_run = True
	# Start main while, receive request and update information to solution
	while do_run:
		print_menu()  ## Displays menu

		try:
			items = dict(poller.poll(1000))
		except (zmq.ZMQError, KeyboardInterrupt):
			break  # interrupt/context shutdown

		if items.get(reader, 0) & zmq.POLLIN:
			line = reader.recv()
			exec_menu(line)


		"""
        **** RECEIVED MESSAGE FROM SHOWCASE NETWORK
        """
		if request in items:
			clear()
			print_log("START")

			msg = request.recv_multipart()
			#print(msg)
			identity = msg[0]
			try:
				received_request = json.loads(msg[3].decode("utf-8"))
			except ValueError:
				print("Received message not in json format")
				continue

			# print(received_request)
			if "type" in received_request:
				network = next((x for x in solutionCompatibilityMatrix if x.name == received_request["networkController"]), None)
				# Process registration request
				if received_request["type"] == "registerRequest":
					print("***Received registration request*** : %s\n" % received_request)

					if "networkController" in received_request and "solution" in received_request and "commandList" in received_request and "monitorList" in received_request:
						if network is None:
							networkNum += 1
							network = Network(
								networkNum,
								received_request["networkController"],
								received_request["networkType"],
								received_request["solution"],
								received_request["commandList"],
								received_request["monitorList"]
							)
							solutionCompatibilityMatrix.append(network)

							if network.name in ["WIFI_A1", "WIFI_A2"]:
								obssManager.add_network(network)
							elif network.name == "6lowPAN":
								sicslowpanManager.set_network(network)
								sicslowpanManager.set_publisher(publisher)

						responseMsg = {"type": "registerResponse", "result": "ok"}
					else:
						print("received malformed registration request")
						responseMsg = {"type": "registerResponse", "result": "bad"}

					# reply response to client
					request.send(identity, zmq.SNDMORE)
					sequence = struct.unpack('!l', msg[2])[0] + 1
					kvmsg = KVMsg(sequence)
					kvmsg.key = b"generic"
					kvmsg.body = json.dumps(responseMsg).encode('utf-8')
					kvmsg.send(request)

				# Process monitoring Report
				if received_request["type"] == "monitorReport":
					#print("*** Received monitoring report *** : %s" % received_request)
					"""
                    data = {
                        "type": "monitorReport", "monitorType": "performance", "networkController": ctrl,
                        "networkType": "80211",
                        "monitorValue": {
                            "timestamp": now,
                            "PER": random.random(),
                            "THR": random.random() * 1e6,
                        },
                    }
                    """

					if received_request["monitorType"] == "performance":
						print("*** Received monitoring report *** : %s" % received_request)
						if startVisualizer:
							now = datetime.datetime.now().timestamp()
							received_request["monitorValue"]["timestamp"] = now
							socket_visualizer.send_multipart([b'monitorReport', json.dumps(received_request).encode('utf-8'), ])
							if received_request["networkController"]=="WIFI_STA1" or received_request["networkController"]=="WIFI_STA2" or received_request["networkController"]=="WIFI_STA3" or received_request["networkController"]=="WIFI_STA4":
								#update culative table
								cumulative_thr_table[stations.index(received_request["networkController"])] = received_request["monitorValue"]["THR"]
								if cmulative_update_num > 3:
									received_request["networkController"] = "WIFI"
									received_request["monitorValue"] = {}
									received_request["monitorValue"]["timestamp"] = now
									received_request["monitorValue"]["THR"] = sum(cumulative_thr_table)
									socket_visualizer.send_multipart([b'cumulativeMonitorReport', json.dumps(received_request).encode('utf-8'), ])
									cmulative_update_num = 0
								else:
									cmulative_update_num += 1

						# if network and network.name in ["WIFI_A1", "WIFI_A2"]:
						# 	obssManager.notify_performance_report(received_request)

					elif received_request["monitorType"] == "interference":
						#print("*** Received monitoring report *** : %s" % received_request)
						# msg = {'type': 'monitorReport',‘networkController': controllerName,	' monitorType ': ‘interference’, 'monitorValue': { “LTE”: { “2467”: [BW, duty]}
						#                  “ZigBee”: { “2484”: [BW, duty]} “Busy”: { “2484”: [BW, duty]} }, }
						#{"type": "monitorReport", "networkController": "MONITOR_SERVICE_CNIT", "monitorType": "interference", "networkType": "SpectrumFeaturesMonitoring", "monitorValue":
						if network and network.name in ["MONITOR_SERVICE_CNIT"]:
							if received_request["networkType"] in ["SpectrumMonitoring"]:
								send_spectrum_update(socket_visualizer, received_request)

							if received_request["networkType"] in ["SpectrumFeaturesMonitoring"]:
								send_spectrum_features_update(socket_visualizer, received_request)

						if network and network.name in ["MONITOR_SERVICE_ERROR"]:
							send_error_monitoring_update(socket_visualizer, received_request)

						#{'monitorValue': {'Busy': {'2412': [20, 0.01], '2437': [20, 0.06], '2462': [20, 0.45]}, 'WIFI': {'2412': [20, 0.01], '2437': [20, 0.04], '2462': [20, 0.28]}},
						# 'networkController': 'WIPLUS_LTE_U_DETECTOR', 'networkType': 'DETECTOR', 'type': 'monitorReport', 'monitorType': 'interference'}
						if network and network.name in ["WIPLUS_LTE_U_DETECTOR"]:
							print("*** Received monitoring report *** : %s" % received_request)
							#obssManager.notify_interference_report(received_request)
							send_spectrum_update_2(socket_visualizer, received_request)
							sicslowpanManager.notify_interference_report(received_request)

					# elif received_request["monitorType"] == "channelUsage":
					# 	network.update_channel(received_request["monitorValue"])
					# 	if startVisualizer:
					# 		send_status_update(socket_visualizer)
					#
					# 	if network and network.name in ["WIFI_A1", "WIFI_A2"]:
					# 		obssManager.notify_channel_usage(received_request)

				# Process command Report
				if received_request["type"] == "commandReport":
					print("*** Received command report *** : %s\n" % received_request)
					if len(solutionCompatibilityMatrix) > 0:
						pass
					else:
						print("Received command report but no solution is registered")

		"""
		**** RECEIVED MESSAGE FROM GUI
		"""
		if socket_visualizer_command in items:
			clear()
			print_log("RECEIVED COMMAND FROM GUI")

			full_msg = socket_visualizer_command.recv_multipart()
			msg = json.loads(full_msg[1].decode('utf-8'), encoding='utf-8')

			if full_msg[0] == b'commandWiFi':
				print("received wificommand", str(msg))
				if msg["selection"] > 0 and msg["selection"] < 6:
					airtime = msg["selection"]
					traffic_load = "HIGH"
					send_command(networkNames[1], solutionNames[1], "START_WIFI", "num_stations", msg["selection"])
					if cooperation:
						send_command(networkNames[1], solutionNames[1], "START_TDMA_2", "air_time", msg["selection"])

				elif msg["selection"] == 6:
					traffic_load = "DYNAMIC"
					airtime = msg["selection"]
					send_command(networkNames[1], solutionNames[1], "START_WIFI", "num_stations", msg["selection"])
					if cooperation:
						send_command(networkNames[1], solutionNames[1], "START_TDMA_2", "air_time", msg["selection"])

				else:
					traffic_load = "OFF"
					send_command(networkNames[1], solutionNames[1], "STOP_WIFI", "2462", True)

				selected_network = next((x for x in solutionCompatibilityMatrix if x.name == networkNames[1]), None)
				selected_network.update_load(traffic_load)

			if full_msg[0] == b'commandLTE':
				print("received ltecommand", str(msg))
				if msg["selection"] == 1:
					traffic_load = "HIGH"
					send_command(networkNames[0], solutionNames[0], "START_LTE", "2462", True)
				else:
					traffic_load = "OFF"
					send_command(networkNames[0], solutionNames[0], "STOP_LTE", "2462", True)
				selected_network = next((x for x in solutionCompatibilityMatrix if x.name == networkNames[0]), None)
				selected_network.update_load(traffic_load)

			if full_msg[0] == b'commandZigBee':
				print("received ZIGBEEcommand", str(msg))
				if msg["selection"] == 1:
					traffic_load = "HIGH"
					send_command(networkNames[2], solutionNames[2], "ENABLE_TSCH", None, True)
					#update message {'type': 'publisherUpdate', 'involvedController': ['6lowPAN'], 'commandList': {'blacklisting': {'ENABLE_TRAFFIC': {}}}}
					send_command(networkNames[2], solutionNames[2], "ENABLE_TRAFFIC", None, True)
				else:
					traffic_load = "OFF"
					send_command(networkNames[2], solutionNames[2], "DISABLE_TRAFFIC", None, True)

				selected_network = next((x for x in solutionCompatibilityMatrix if x.name == networkNames[2]), None)
				selected_network.update_load(traffic_load)

				time.sleep(3)

			if full_msg[0] == b'commandCooperaiton':
				print("received cooperationcommand", str(msg))
				if msg["selection"] == 1:
					cooperation = True
					if airtime > 0:
						send_command(networkNames[1], solutionNames[1], "START_TDMA_2", "air_time", airtime)
				else:
					cooperation = False
					send_command(networkNames[1], solutionNames[1], "STOP_TDMA", "2462", True)

			if full_msg[0] == b'commandDeterministic':
				print("received commandDeterministic", str(msg))
				table_id = msg["selection"]
				send_command(networkNames[1], solutionNames[1], "START_TDMA_2", "table_id", table_id)

			if full_msg[0] == b'commandWiFiRate':
				print("received commandDeterministic", str(msg))
				rate_id = msg["selection"]
				send_command(networkNames[1], solutionNames[1], "START_WIFI_2", "rate_id", rate_id)
				if msg["selection"] > 0:
					traffic_load = "HIGH"
				else:
					traffic_load = "OFF"
				selected_network = next((x for x in solutionCompatibilityMatrix if x.name == networkNames[1]), None)
				selected_network.update_load(traffic_load)

			if startVisualizer:
				send_status_update(socket_visualizer)
			time.sleep(1)


		if startVisualizer:
			send_status_update(socket_visualizer)


		"""
		print(30 * "-", "DEMO PHASE STATUS ", 30 * "-")
		print("current_phase : %d, state_phase : %d, time_phase : %d, auto_phase : %d" % (current_phase, state_phase, time_phase, auto_phase))
		print(30 * "-", "PHASE", 30 * "-")
		if time.time()> (last_time_phase + 1):
			#poll timeout
			last_time_phase = time.time()
			time_phase += 1

			if auto_phase and time_phase>100:
				current_phase = (current_phase + 1)%4
				time_phase = 0

			if current_phase == -2:

				traffic_load = "OFF"
				send_command(networkNames[0], solutionNames[0], "TRAFFIC_SET_OFF", "TYPE", traffic_load)
				selected_network = next((x for x in solutionCompatibilityMatrix if x.name == networkNames[0]), None)
				selected_network.update_load(traffic_load)

				send_command(networkNames[1], solutionNames[1], "TRAFFIC_SET_OFF", "TYPE", traffic_load)
				selected_network = next((x for x in solutionCompatibilityMatrix if x.name == networkNames[1]), None)
				selected_network.update_load(traffic_load)

				send_command(networkNames[2], solutionNames[2], "ENABLE_TSCH", None, True)
				send_command(networkNames[2], solutionNames[2], "'DISABLE_TRAFFIC': ", None, True)
				selected_network = next((x for x in solutionCompatibilityMatrix if x.name == networkNames[2]), None)
				selected_network.update_load(traffic_load)

				send_command(networkNames[3], solutionNames[3], "DEACTIVATE", "freq", 2412)
				selected_network = next((x for x in solutionCompatibilityMatrix if x.name == networkNames[3]), None)
				selected_network.update_load(traffic_load)

				#send_command(networkNames[4], solutionNames[4], "ENABLE_LTE_6_SUBFRAME", "2462", True)
				send_command(networkNames[4], solutionNames[4], "STOP_LTE", "2462", True)
				selected_network = next((x for x in solutionCompatibilityMatrix if x.name == networkNames[4]), None)
				selected_network.update_load(traffic_load)

				send_command(networkNames[5], solutionNames[5], "STOP_WIFI", "2462", True)
				send_command(networkNames[5], solutionNames[5], "STOP_TDMA", "2462", True)
				selected_network = next((x for x in solutionCompatibilityMatrix if x.name == networkNames[5]), None)
				selected_network.update_load(traffic_load)

				# {'type': 'publisherUpdate', 'involvedController': ['LTE_virt'], 'commandList': {'Radio Virtualization': {'STOP_LTE': {'2437': False}}}}
				# {'type': 'publisherUpdate', 'involvedController': ['LTE_nb'], 'commandList': {'Radio Virtualization': {'STOP_NBIOT': {'2437': False}}}}
				send_command(networkNames[6], solutionNames[6], "STOP_LTE", None, True)
				selected_network = next((x for x in solutionCompatibilityMatrix if x.name == networkNames[6]), None)
				selected_network.update_load(traffic_load)
				send_command(networkNames[7], solutionNames[7], "STOP_NBIOT", None, True)
				selected_network = next((x for x in solutionCompatibilityMatrix if x.name == networkNames[7]), None)
				selected_network.update_load(traffic_load)

				current_phase = -1

			###################################
			#######  PHASE 0 ##################
			###################################
			if current_phase == 0:
				# Pass the commands of the network to the output:
				# for command_index in range(0, len(selected_network.commandList)):
				# 	print("     " + str(command_index) + " :" + str(selected_network.commandList[command_index]))
				# print("insert command number : ")
				# Command menu (choice of network)
				# print(networkNames[0])
				# print(networkNames[1])
				# print(networkNames[2])

				if state_phase == 0:
					traffic_load = "HIGH"
					send_command(networkNames[0], solutionNames[0], "SWITCH_CHANNEL", "channel", 1)
					send_command(networkNames[0], solutionNames[0], "TRAFFIC", "TYPE", traffic_load)
					selected_network = next((x for x in solutionCompatibilityMatrix if x.name == networkNames[0]), None)
					selected_network.update_load(traffic_load)

					send_command(networkNames[2], solutionNames[2], "ENABLE_TSCH", None, True)
					send_command(networkNames[2], solutionNames[2], "ENABLE_TRAFFIC", None, True)
					selected_network = next((x for x in solutionCompatibilityMatrix if x.name == networkNames[2]), None)
					selected_network.update_load(traffic_load)

					if startVisualizer:
						send_status_update(socket_visualizer)

					# send_command(networkNames[1], solutionNames[1], "TRAFFIC", "TYPE", traffic_load)
					state_phase +=1

			###################################
			#######  PHASE 1 ##################
			###################################
			elif current_phase == 1:
				# print(networkNames[3])
				# print(networkNames[0])
				# print(networkNames[1])
				# print(networkNames[2])

				traffic_load = "HIGH"

				if time_phase < 50 and state_phase == 0:
					send_command(networkNames[2], solutionNames[2], "ENABLE_TSCH", None, True)
					send_command(networkNames[2], solutionNames[2], "ENABLE_TRAFFIC", None, True)
					selected_network = next((x for x in solutionCompatibilityMatrix if x.name == networkNames[2]), None)
					selected_network.update_load(traffic_load)

					send_command(networkNames[0], solutionNames[0], "SWITCH_CHANNEL", "channel", 6)
					send_command(networkNames[0], solutionNames[0], "TRAFFIC", "TYPE", traffic_load)
					selected_network = next((x for x in solutionCompatibilityMatrix if x.name == networkNames[0]), None)
					selected_network.update_load(traffic_load)

					send_command(networkNames[1], solutionNames[1], "SWITCH_CHANNEL", "channel", 11)
					send_command(networkNames[1], solutionNames[1], "TRAFFIC", "TYPE", traffic_load)
					selected_network = next((x for x in solutionCompatibilityMatrix if x.name == networkNames[1]), None)
					selected_network.update_load(traffic_load)

					send_command(networkNames[3], solutionNames[3], "ACTIVATE", "freq", 2412)
					selected_network = next((x for x in solutionCompatibilityMatrix if x.name == networkNames[3]), None)
					selected_network.update_load(traffic_load)

					if startVisualizer:
						send_status_update(socket_visualizer)

					state_phase +=1

			###################################
			#######  PHASE 2 ##################
			###################################
			elif current_phase == 2:
				# print(networkNames[0])
				# print(networkNames[1])
				# print(networkNames[4])
				# print(networkNames[5])
				# print(networkNames[2])

				traffic_load = "HIGH"

				if time_phase < 50 and state_phase == 0:
					send_command(networkNames[3], solutionNames[3], "DEACTIVATE", "freq", 2412)
					selected_network = next((x for x in solutionCompatibilityMatrix if x.name == networkNames[3]), None)
					selected_network.update_load(traffic_load)

					send_command(networkNames[1], solutionNames[1], "SWITCH_CHANNEL", "channel", 1)
					send_command(networkNames[1], solutionNames[1], "TRAFFIC", "TYPE", traffic_load)
					selected_network = next((x for x in solutionCompatibilityMatrix if x.name == networkNames[1]), None)
					selected_network.update_load(traffic_load)

					send_command(networkNames[0], solutionNames[0], "TRAFFIC", "TYPE", traffic_load)
					selected_network = next((x for x in solutionCompatibilityMatrix if x.name == networkNames[0]), None)
					selected_network.update_load(traffic_load)

					send_command(networkNames[4], solutionNames[4], "ENABLE_LTE_7_SUBFRAME", "2462", True)
					send_command(networkNames[4], solutionNames[4], "START_LTE", "2462", True)
					selected_network = next((x for x in solutionCompatibilityMatrix if x.name == networkNames[4]), None)
					selected_network.update_load(traffic_load)

					send_command(networkNames[5], solutionNames[5], "START_WIFI", "2462", True)
					send_command(networkNames[5], solutionNames[5], "STOP_TDMA", "2462", True)
					selected_network = next((x for x in solutionCompatibilityMatrix if x.name == networkNames[5]), None)
					selected_network.update_load(traffic_load)

					send_command(networkNames[2], solutionNames[2], "ENABLE_TSCH", None, True)
					send_command(networkNames[2], solutionNames[2], "ENABLE_TRAFFIC", None, True)
					selected_network = next((x for x in solutionCompatibilityMatrix if x.name == networkNames[2]), None)
					selected_network.update_load(traffic_load)

					if startVisualizer:
						send_status_update(socket_visualizer)
					state_phase += 1

				if time_phase > 50 and state_phase == 1:
					# send_command(networkNames[4], solutionNames[4], "ENABLE_LTE_TDM_SUBFRAME", "2462", True)
					send_command(networkNames[5], solutionNames[5], "START_TDMA", "2462", True)
					if startVisualizer:
						send_status_update(socket_visualizer)
					state_phase += 1


			###################################
			#######  PHASE 3 ##################
			###################################
			elif current_phase == 3:
				# print(networkNames[3])
				# print(networkNames[0])
				# print(networkNames[4])
				# print(networkNames[5])
				# print(networkNames[2])


				if time_phase < 50 and state_phase == 0:
					traffic_load = "OFF"
					send_command(networkNames[1], solutionNames[1], "TRAFFIC_SET_OFF", "TYPE", traffic_load)
					selected_network = next((x for x in solutionCompatibilityMatrix if x.name == networkNames[1]), None)
					selected_network.update_load(traffic_load)

					traffic_load = "HIGH"
					send_command(networkNames[3], solutionNames[3], "ACTIVATE", "freq", 2412)
					selected_network = next((x for x in solutionCompatibilityMatrix if x.name == networkNames[3]), None)
					selected_network.update_load(traffic_load)

					# send_command(networkNames[4], solutionNames[4], "ENABLE_LTE_6_SUBFRAME", "2462", True)
					send_command(networkNames[5], solutionNames[5], "STOP_TDMA", "2462", True)

					send_command(networkNames[4], solutionNames[4], "START_LTE", "2462", True)
					selected_network = next((x for x in solutionCompatibilityMatrix if x.name == networkNames[4]), None)
					selected_network.update_load(traffic_load)
					send_command(networkNames[5], solutionNames[5], "START_WIFI", "2462", True)
					selected_network = next((x for x in solutionCompatibilityMatrix if x.name == networkNames[5]), None)
					selected_network.update_load(traffic_load)
					send_command(networkNames[2], solutionNames[2], "ENABLE_TRAFFIC", None, True)
					selected_network = next((x for x in solutionCompatibilityMatrix if x.name == networkNames[2]), None)
					selected_network.update_load(traffic_load)

					# {'type': 'publisherUpdate', 'involvedController': ['LTE_virt'], 'commandList': {'Radio Virtualization': {'STOP_LTE': {'2437': False}}}}
					# {'type': 'publisherUpdate', 'involvedController': ['LTE_nb'], 'commandList': {'Radio Virtualization': {'STOP_NBIOT': {'2437': False}}}}
					send_command(networkNames[6], solutionNames[6], "START_LTE", None, True)
					selected_network = next((x for x in solutionCompatibilityMatrix if x.name == networkNames[6]), None)
					selected_network.update_load(traffic_load)
					send_command(networkNames[7], solutionNames[7], "START_NBIOT", None, True)
					selected_network = next((x for x in solutionCompatibilityMatrix if x.name == networkNames[7]), None)
					selected_network.update_load(traffic_load)

					state_phase +=1

				if time_phase > 50 and state_phase == 1:
					send_command(networkNames[4], solutionNames[4], "ENABLE_LTE_TDM_SUBFRAME", "2462", True)
					send_command(networkNames[5], solutionNames[5], "START_TDMA", "2462", True)
					# {'type': 'publisherUpdate', 'involvedController': ['6lowPAN'], 'commandList': {'blacklisting': {'LTE_WIFI_ZIGBEE': True}}}
					send_command(networkNames[2], solutionNames[2], "LTE_WIFI_ZIGBEE", True, True)

					state_phase += 1

			else:
				print("no phase selected")
				
			"""


if __name__ == "__main__":
	try:
		from docopt import docopt
	except:
		print(""" Please install docopt using:
            pip install docopt==0.6.1
            For more refer to: https://github.com/docopt/docopt """)
		raise

	args = docopt(__doc__, version=__version__)
	log_level = logging.INFO  # default
	if args['--verbose']:
		log_level = logging.DEBUG
	elif args['--quiet']:
		log_level = logging.ERROR

	logfile = None
	if args['--logfile']:
		logfile = args['--logfile']

	logging.basicConfig(filename=logfile, level=log_level,
						format='%(asctime)s - %(name)s.%(funcName)s() - %(levelname)s - %(message)s')

	# Get configuration file
	if args['--config']:
		config_file_path = args['--config']
		config = None
		with open(config_file_path, 'r') as f:
			config = yaml.load(f)
	try:
		main(args)
		print('end main')
	except KeyboardInterrupt:
		log.debug("Controller exits")
	finally:
		log.debug("Exit")
