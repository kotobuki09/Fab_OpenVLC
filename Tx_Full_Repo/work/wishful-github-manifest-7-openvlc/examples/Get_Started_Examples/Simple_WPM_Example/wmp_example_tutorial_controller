#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
wmp_example_tutorial_controller: Example tutorial of WiSHFUL (agent side)

Usage:
   wmp_example_tutorial_controller [options] [-q | -v]

Options:
   --logfile name      Name of the logfile
   --config configFile Config file path

Example:
   ./wishful_example_tutorial_controller -v --config ./config.yaml

Other options:
   -h, --help          show this help message and exit
   -q, --quiet         print less text
   -v, --verbose       print more text
   --version           show version and exit
"""
import types
import sys
import time
import datetime
import logging
import gevent

sys.path.append('../../')
sys.path.append("../../agent_modules/wifi_ath")
sys.path.append("../../agent_modules/wifi_wmp")
sys.path.append("../../agent_modules/wifi")
sys.path.append('../../upis')
sys.path.append('../../framework')
sys.path.append('../../agent')

import wishful_controller
import wishful_upis as upis

from agent_modules.wifi_wmp.wmp_structure import UPI_R
from agent_modules.wifi_wmp.wmp_structure import execution_engine_t
from agent_modules.wifi_wmp.wmp_structure import radio_platform_t
from agent_modules.wifi_wmp.wmp_structure import radio_info_t
from agent_modules.wifi_wmp.wmp_structure import radio_program_t

__author__ = "Domenico Garlisi"
__copyright__ = "Copyright (c) 2015, CNIT"
__version__ = "0.1.0"
__email__ = "domenico.garlisi@cnit.it"

"""
Setting of experiment nodes, ip address and name
"""
#PC
controller_PC_ip_address = "172.16.0.100"
controller_PC_interface = "eth4"

# AP
ap_name = "node0"
ap_ip = "172.16.0.9"
ap_wlan_interface = "wlan0"

# STA
sta_name = "node1"
sta_ip = "172.16.0.12"
sta_wlan_interface = "wlan0"

#Nodes number
nodes_number=2

# BSSID of our Network
network_bssid = "wishful_example_tutorial"
group_name = "example_tutorial"

"""
END setting of experiment nodes
"""



""" START the WiSHFUL controller setting """
"""
The WiSHFUL controller module is the core module of the WiSHFUL framework and allow all the basics functions
such as the node discovery, the UPI functions execution on local and remote node, perform the messages exchange between
global control program and local control program, and all the other management functions of the framework. The different
works of the controller are  performed by different module can be added on demand in the controller
"""

#Create controller, we specify in the parameters the ip addresses and the ports used for downlink and uplink connection
#with the nodes tesbed, in this case we spcify the interface loopback and the port 8990 for the downlink and the
# interface loopback and the port 8989 for the uplink.
controller = wishful_controller.Controller(dl="tcp://"+controller_PC_ip_address+":8990", ul="tcp://"+controller_PC_ip_address+":8989")

#Configure controller, we specify in the parameters the controller name and a string information related to the
#controller
controller.set_controller_info(name="WishfulController", info="WishfulControllerInfo")

#the following rows add all the needed modules to the controller

#add the discovery module, responsable for the nodes discovery procedure and nodes adding to the controllers
#we specify interface, the name of the nodes group, and the ip address and port for the downlink and uplink connection
controller.add_module(moduleName="discovery", pyModuleName="wishful_module_discovery_pyre",
                      className="PyreDiscoveryControllerModule", 
                      kwargs={"iface":controller_PC_interface, "groupName":group_name, "downlink":"tcp://"+controller_PC_ip_address+":8990", "uplink":"tcp://"+controller_PC_ip_address+":8989"})

""" END the WiSHFUL controller setting """

""" START Define logging controller """
""" we use the python logging system module (https://docs.python.org/2/library/logging.html) """

#set the logging name
log = logging.getLogger('wishful_controller')

""" END Define logging controller """


#experiment nodes list
nodes = []

@controller.new_node_callback()
def new_node(node):
    """ This function is performed when a new node has been found in the network

    :param node: finded node
    """
    #the found node is added to the controller nodes list
    nodes.append(node)
    print("New node appeared:")
    print(node)

@controller.node_exit_callback()
def node_exit(node, reason):
    """ This function is performed when a node, present in the controller node list, leave the experiment. During the
    experiment, the nodes send "hello packet" to the controller. If the controller do not receives hello packet from a node
    present in the node list, perform this function and the node is been removed

    :param node: node that leave the experiment
    :param reason : exit reason
    """
    if node in nodes:
        nodes.remove(node);
    print("NodeExit : NodeID : {} Reason : {}".format(node.id, reason))


@controller.add_callback(upis.radio.get_tx_power)
def get_tx_power_reponse(group, node, data):
    """ This function implements a callback to print "get_tx_power" UPI function calling result

    :param group: Experiment group name
    :param node: Node used to execute the UPI
    :param data: Execution time
    """
    print("\n{} get_tx_power_reponse : Group:{}, NodeId:{}, msg:{}".format(datetime.datetime.now(), group, node.id, data))
    print("\n get_tx_power result {}dBm".format(data))


def print_response(group, node, data):
    """ This function implements a callback to print generic UPI function calling result

    :param group: Experiment group name
    :param node: Node used to execute the UPI
    :param data: Execution time
    """
    print("\n{} Print response : Group:{}, NodeIP:{}, Result:{}".format(datetime.datetime.now(), group, node.ip, data))


@controller.set_default_callback()
def default_callback(group, node, cmd, data):
    """ This function implements generic callback to print UPI function calling result, the framework performs this
    function when no other function has been binded to the UPI.

    :param group: Experiment group name
    :param node: Node used to execute the UPI
    :param cmd: UPI function that has generate the callback
    :param data: Execution time
    """
    print("\n{} DEFAULT CALLBACK : Group: {}, NodeName: {}, Cmd: {}, Returns: {}".format(datetime.datetime.now(), group, node.name, cmd, data))


def setAP(controller, node, essid):
    """ This function use WiSHFUL UPI functions to perform an IEEE 802.11 infrastructure BSS, the "node" parameter is used as
        Network Access Point. The WiSHFUL UPI used hostapd daemon to create the network.

    :param controller: framework controller object
    :param node: elected Access Point Node
    :param essid: the network SSID
    """

    #This UPI function stops the hostpad daemon, if present on node
    rvalue = controller.nodes(node).net.stop_hostapd()
    #This UPI function sets the node ip address on a specific interface
    rvalue = controller.nodes(node).net.set_ip_address(ap_wlan_interface, '192.168.3.' + node.ip.split('.')[3] )
    #This UPI function sets the hostapd configuration (starting from a generic file set interface, channel and SSID )
    rvalue = controller.nodes(node).net.set_hostapd_conf(ap_wlan_interface, './hostapd.conf', 6, essid)
    #This UPI function starts the hostapd daemon (it uses a specific hostapd.conf file present in the experiment directory
    rvalue = controller.nodes(node).net.start_hostapd('./hostapd.conf')
    #This UPI function sets the node power (value in dBm)
    rvalue = controller.nodes(node).radio.set_tx_power(15)
    #This UPI function sets the node modulation rate (value in Mbps)
    rvalue = controller.nodes(node).radio.set_modulation_rate(2)


def setSTA(controller, node, essid):
    """ This function use WiSHFUL UPI functions to connect a node to a IEEE 802.11 infrastructure BSS, the function
    performs 10 attempts before to return a failure state.

    :param controller: framework controller object
    :param node: elected station node by associate
    :param essid: the network SSID

    :return connected: True if the connection has been successful, False in other cases.
    """

    #This UPI function stops the hostpad daemon, if present on node
    rvalue = controller.nodes(node).net.stop_hostapd()
    #This UPI function sets the node ip address on a specific interface
    rvalue = controller.nodes(node).net.set_ip_address(sta_wlan_interface, '192.168.3.' + node.ip.split('.')[3])
    #This UPI function sets the node power (value in dBm)
    rvalue = controller.nodes(node).radio.set_tx_power(15)
    #This UPI function sets the node modulation rate (value in Mbps)
    rvalue = controller.nodes(node).radio.set_modulation_rate(2)
    connected = False
    for ii in range(10):
        #This UPI function sets the node modulation rate (value in Mbps)
        rvalue = controller.nodes(node).net.connect_to_network(sta_wlan_interface, essid)
        time.sleep(2)
        #This UPI function gets the node connection state
        rvalue = controller.nodes(node).net.network_dump(sta_wlan_interface)
        flow_info_lines = rvalue.rstrip().split('\n')
        if flow_info_lines[0][0:9] == "Connected" :
                connected = True
                break
    return connected


def get_platform_information(node, log, controller):
    """ Gives the node platform information and instantiates a object of radio_info_t class related to the node passed
        by argument parameter. The function sues UPI get_radio_platforms to check if WMP platform is available for node
        The function uses UPI get_radio_info to extracts node capabilities in terms of execution environment,
        radio program and platform info (parameters and measurements).

    :param node: node from get platform supported and capabilities
    :param log: experiment logging module attribute
    :param controller: experiment object controller
    :return current_platform_info: return an object of class radio_info_t with all the node capabilities, false if the WMP
                              platform is not supported by node or an error occurred.
    """


    #list initialization
    current_radio_list = None
    current_radio_list = [radio_platform_t() for i in range(2)]

    current_platform_info = radio_info_t()
    current_platform_info.platform_info = radio_platform_t()
    current_platform_info.execution_engine_list = [execution_engine_t() for i in range(2) ]
    current_platform_info.radio_program_list = [ radio_program_t() for i in range(2) ]

    wmp_platform_index = None
    #get radio platform for the node
    current_radio_list_string = controller.nodes(node).radio.get_radio_platforms()

    current_radio_list[0].platform_id =  current_radio_list_string[0]
    current_radio_list[0].platform_type =  current_radio_list_string[1]

    for ii in range(len(current_radio_list)):
        log.info('INTERFACE : %s : SUPPORTED PLATFORM : %s' % (current_radio_list[ii].platform_id, current_radio_list[ii].platform_type) )
        if current_radio_list[ii].platform_type == "WMP" :
            wmp_platform_index = ii
            break

    # Check if the Node NIC support the WMP platform
    if wmp_platform_index == None :
        log.debug('No WMP platform is supported')
        return False

    # Gets available radio capabilities
    current_platform_info_str = controller.nodes(node).radio.get_radio_info(current_radio_list[wmp_platform_index].platform_id)
    log.debug('current_platform_str %s' % current_platform_info_str)

    current_platform_info.platform_info.platform_id = current_platform_info_str['radio_info'][0]
    current_platform_info.platform_info.platform_type = current_platform_info_str['radio_info'][1]

    log.debug("Radio capabilities for %s " % str(node))
    log.debug(" RADIO : %s - PLATFORM : %s" % (str(current_platform_info.platform_info.platform_id), str(current_platform_info.platform_info.platform_type) ) )

    # Gets monitor measurements and parameters supported
    current_platform_info.monitor_list = current_platform_info_str['monitor_list']
    current_platform_info.param_list = current_platform_info_str['param_list']

    # Gets supported execution environment supported
    execution_engine_list_name = current_platform_info_str['exec_engine_list_name']
    execution_engine_list_name = execution_engine_list_name[0]
    execution_engine_list_pointer = current_platform_info_str['exec_engine_list_pointer']
    execution_engine_list_pointer = execution_engine_list_pointer[0]
    current_platform_info.execution_engine_list = [execution_engine_t() for i in range(len(execution_engine_list_name)) ]
    for ii in range( len(execution_engine_list_name) ) :
        current_platform_info.execution_engine_list[ii].execution_engine_name = execution_engine_list_name[ii]
        current_platform_info.execution_engine_list[ii].execution_engine_pointer = execution_engine_list_pointer[ii]

    # Gets radio program supported
    radio_prg_list_name = current_platform_info_str['radio_prg_list_name']
    radio_prg_list_name = radio_prg_list_name [0]
    radio_prg_list_pointer = current_platform_info_str['radio_prg_list_pointer']
    radio_prg_list_pointer = radio_prg_list_pointer[0]
    current_platform_info.radio_program_list = [ radio_program_t() for i in range(len(radio_prg_list_name)) ]
    for ii in range(len(radio_prg_list_name)):
        current_platform_info.radio_program_list[ii].radio_prg_name = radio_prg_list_name[ii]
        current_platform_info.radio_program_list[ii].radio_prg_pointer = radio_prg_list_pointer[ii]

    return current_platform_info

def active_TDMA_radio_program(node, log, controller, current_platform_info):
    """ Set TDMA radio program and parameters on node. The TDMA radio program has three parameter, they are: superframe
        size, number of sync slot and allocated slot, this function set them together.

    :param node: Node or Nodes list
    :param log: experiment logging object
    :param controller: experiment object controller
    :param current_platform_info: node capabilities
    :return result: Result of setting (True = successful, False = failure)
    """

    SUCCESS = 0
    FAILURE = 2

    radio_program_pointer_TDMA = ""
    position = ""

    # Find TDMA radio program pointer in current_platform_info capability list
    for ii in range(len(current_platform_info.radio_program_list)):
        if current_platform_info.radio_program_list[ii].radio_prg_name == "TDMA" :
            radio_program_pointer_TDMA = current_platform_info.radio_program_list[ii].radio_prg_pointer
            position = '2'

    # Active TDMA radio program
    UPIargs = {'position' : position, 'radio_program_name' : 'TDMA', 'path' : radio_program_pointer_TDMA, 'interface' : 'wlan0' }
    rvalue = controller.nodes(node).radio.activate_radio_program(UPIargs)

    slot_index = 0
    slot_size = 2200 #slot size in ms
    superframe_size = slot_size * nodes_number # frame size in ms

    # Set the TDMA parameter
    UPIargs = { 'interface' : 'wlan0', UPI_R.TDMA_SUPER_FRAME_SIZE:superframe_size, UPI_R.TDMA_NUMBER_OF_SYNC_SLOT : nodes_number, UPI_R.TDMA_ALLOCATED_SLOT : slot_index }
    rvalue = controller.nodes(node).radio.set_parameters(UPIargs)

    gevent.sleep(1)
    # Active new configuration
    UPIargs = {'radio_program_name' : 'TDMA' }
    rvalue = controller.nodes(node).radio.activate_radio_program(UPIargs)

    if rvalue != SUCCESS :
        log.debug('Error in radio program activation')
        return False

    log.warning('Radio program activation succesfull')
    return True


def main(args):

    #start the controller
    controller.start()

    #list with information about platform type and radio capabilities for experiment nodes
    nodes_platform_info = None

    #control loop
    while True:
        gevent.sleep(5)

        #Print the currently connected nodes
        print("\nConnected nodes", [str(node.name) for node in nodes])

        #Check if all nodes are present in the experiment
        if len(nodes) == nodes_number:

            """
            This part of controller assigns the correct role for any experiment node finded
            """
            ap_node = None
            sta_node= None
            #Find experiment nodes role
            for ii in range(0, len(nodes)):
                    if nodes[ii].ip == ap_ip:
                        ap_node = nodes[ii]
                    if nodes[ii].ip == sta_ip:
                        sta_node = nodes[ii]
            if ap_node == None and sta_node == None :
                print("Experiment nodes found, however the reported ip address do not match, please check the setting ip address, the interface and the group name")
                break

            """
            This part of the controller performs a IEEE 802.11 network
            """
            #Create a IEEE 802.11 infrastructure network where the "ap_node" node is the network Access Point
            setAP(controller, ap_node, network_bssid)

            #Connect "sta_node" node to IEEE 802.11 infrastructure network
            connected = setSTA(controller, sta_node, network_bssid)
            if not connected:
                print('Station not connect, try again')
                break
            print('Node [ %s - %s ] connected' % (str(sta_node.name), str(sta_node.ip) ))

            """
            This part of the controller uses the UPI set_power function to show all the framework UPI calling type
            """
            #execute non-blocking function immediately
            print("\n{} TX power setting".format(datetime.datetime.now()))
            controller.blocking(False).node(sta_node).radio.set_tx_power(20)
            gevent.sleep(5)

            #execute blocking function immediately
            result = controller.node(sta_node).radio.get_tx_power()
            print("\n{} TX power reading result: {}dBm".format(datetime.datetime.now(), result))
            gevent.sleep(5)

            #schedule non-blocking function with delay
            controller.delay(3).node(sta_node).radio.set_tx_power(10)
            gevent.sleep(5)

            #execute non-blocking function immediately, with registered callback
            controller.blocking(False).node(sta_node).radio.get_tx_power()
            gevent.sleep(5)

            #schedule non-blocking function with precise execution time
            exec_time = datetime.datetime.now() + datetime.timedelta(seconds=3)
            controller.exec_time(exec_time).node(sta_node).radio.set_tx_power(15)

            #execute non-blocking function immediately, with specific callback
            controller.callback(print_response).node(sta_node).radio.get_tx_power()
            gevent.sleep(5)


            """
            This part of controller uses the WiSHFUL UPI functions to change node radio program, more specifically we
            switch from CSMA to TDMA the radio program on station node.
            """
            #get node capabilities
            nodes_platform_info = get_platform_information( sta_node, log, controller)

            #get active radio program on station node
            active_radio_program = controller.nodes(sta_node).radio.get_running_radio_program()
            print("radio program activated : %s (1=CSMA, 2=TDMA)" % str(active_radio_program) )

            #active TDMA radio progrma on staiton node
            active_TDMA_radio_program(sta_node, log, controller, nodes_platform_info)

            #get active radio program on station node
            active_radio_program = controller.nodes(sta_node).radio.get_running_radio_program()
            print("radio program after switching : %s (1=CSMA, 2=TDMA)" % str(active_radio_program) )

            break


if __name__ == "__main__":
    try:
        from docopt import docopt
    except:
        print("""
        Please install docopt using:
            pip install docopt==0.6.1
        For more refer to:
        https://github.com/docopt/docopt
        """)
        raise

    #get program arguments
    args = docopt(__doc__, version=__version__)

    """ START Configure logging controller """
    """ we use the python logging system module (https://docs.python.org/2/library/logging.html) """

    #set the logging level
    log_level = logging.INFO  # default
    if args['--verbose']:
        log_level = logging.DEBUG
    elif args['--quiet']:
        log_level = logging.ERROR
    #set the logging format
    logging.basicConfig(level=log_level, format='%(asctime)s - %(name)s.%(funcName)s() - %(levelname)s - %(message)s')

    """ END Define logging controller """

    try:
        main(args)
    except KeyboardInterrupt:
        log.debug("Controller exits")
    finally:
        log.debug("Exit")
        controller.stop()