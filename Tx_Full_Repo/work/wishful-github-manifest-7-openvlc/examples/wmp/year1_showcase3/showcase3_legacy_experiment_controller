#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Showacase 3 (Year 1) implementation of WiSHFUL Project

Usage:
   showcase3_controller.py [options] [-q | -v]

Options:
   --logfile name      Name of the logfile
   --config configFile Config file path

Example:
   ./showcase3_controller -v --config ./controller_config.yaml

Other options:
   -h, --help          show this help message and exit
   -q, --quiet         print less text
   -v, --verbose       print more text
   --version           show version and exit
"""
__author__ = "Domenico Garlisi"
__copyright__ = "Copyright (c) 2015, Technische Universit√§t Berlin"
__version__ = "0.1.0"
__email__ = "domenico.garlisi@cnit.it"

import sys
import datetime
import logging
import gevent
import yaml
import time
import random
import _thread
import zmq
import csv
import shutil
from tempfile import NamedTemporaryFile

sys.path.append('../../../')
sys.path.append("../../../agent_modules/wifi_ath")
sys.path.append("../../../agent_modules/wifi_wmp")
sys.path.append("../../../agent_modules/wifi")
sys.path.append('../../../upis')
sys.path.append('../../../framework')
sys.path.append('../../../agent')
sys.path.append('../../../controller')
sys.path.append("../../../agent_modules/net_linux")


import wishful_upis as upis
import wishful_controller

from examples.wmp.year1_showcase3.wmp_helper.controller_utils import *
from examples.wmp.year1_showcase3.wmp_helper.TestbedTopology import TestbedTopology
from examples.wmp.year1_showcase3.wmp_helper.MeasurementManager import MeasurementCollector
from agent_modules.wifi_wmp.wmp_structure import UPI_R
from local_control_program import *

log = logging.getLogger('wishful_agent.main')
controller = wishful_controller.Controller()
mytestbed = TestbedTopology("wmp_radio_program", log, controller)
meas_collector = MeasurementCollector(mytestbed, log)

nodes = []

@controller.new_node_callback()
def new_node(node):
    print("New node appeared:")
    print(node)
    nodes.append(node)
    mytestbed.add_discovered_node(node)

@controller.node_exit_callback()
def node_exit(node, reason):
    if node in nodes:
        nodes.remove(node);
    print("NodeExit : NodeID : {} Reason : {}".format(node.id, reason))


@controller.set_default_callback()
def default_callback(group, node, cmd, data):
    print("DEFAULT CALLBACK : Group: {}, NodeId: {}, Cmd: {}, Returns: {}".format(group, node.id, cmd, data))

def print_response(par_1, par_2, data):
    print("{} Specific callback for function call; Print response : {}".format(datetime.datetime.now(),data))


def get_traffic():
    """ The interface between WiSHFUL controller and Experiment controller, provided by a csv file
        (./testbed_nodes.csv), is used to store the traffic nodes activity (e.g. traffic on/off).
        This function return the number of stations that have an active traffic

        :return traffic_number: number of active traffic
    """
    filename = 'testbed_nodes.csv'
    traffic_number = 0
    with open(filename, 'r') as csvFile:
        reader = csv.DictReader(csvFile)
        for row in reader:
            if row['traffic'] == '1':
                traffic_number += 1
    return traffic_number


def register_traffic(station_index, value):
    """ The interface between WiSHFUL controller and Experiment controller, provided by a csv file
	    (./testbed_nodes.csv), it is used also to store the traffic nodes activity (e.g. traffic on/off).
	  This function update the state of traffic activation for a specific station

	    :param station_index: index of station in csv file to update
	    :param value: value used to update traffic station
	"""
    filename_input = 'testbed_nodes.csv'
    filename_output = 'testbed_nodes.csv~'
    with open(filename_input, newline='') as csvinput:
        with open(filename_output, 'w', newline='') as csvoutput:
            fieldnames = ['ip', 'hostname', 'role', 'platform', 'traffic']
            reader = csv.DictReader(csvinput)
            writer = csv.DictWriter(csvoutput, fieldnames=fieldnames)
            writer.writeheader()
            row_number = 0
            for row in reader:
                if row_number in station_index:
                    writer.writerow({'ip': row['ip'], 'hostname': row['hostname'], 'role': row['role'], 'platform' : row['platform'], 'traffic': value })
                else:
                    writer.writerow({'ip': row['ip'], 'hostname': row['hostname'], 'role': row['role'], 'platform' : row['platform'], 'traffic': row['traffic'] })
                row_number += 1
    shutil.move(filename_output, filename_input)
    return

def start_visualizer_connection():

    ''' SETUP PYTHON VISUALIZER '''
    ''' implement message zmq for realtime visualizer '''
    #global socket_visualizer
    port = "12345"
    context = zmq.Context()
    socket_visualizer = context.socket(zmq.PUB)
    socket_visualizer.bind("tcp://*:%s" % port)

    ''' implement OML database setup for realtime visualizer '''
    # #global omlInst
    # #omlInst = oml4py.OMLBase("LocalControlProgram", "WiSHFUL", socket.gethostname(),"tcp:am.wilab2.ilabt.iminds.be:3004")
    # #omlInst.addmp("IEEE802154_MACSTATS", "timestamp:int32 nodeID:int32 packetSize:int32 activeRadioprogram:string timeDiff:int32 numTxRequest:int32 numTxRequestFail:int32 numTxAttempt:int32 numTxSuccess:int32 numTxFail:int32 numTxBusy:int32 numTxNoAck:int32 numTxCollision:int32 numRx:int32 avgBackoffExponent:int32")
    # #omlInst.start()

    return socket_visualizer

def collect_remote_messages(lcpDescriptor_node, socket_visualizer):

    cycle = 0
    while True:
        #print('cycle % d' % cycle)
        msg_data = lcpDescriptor_node.recv(timeout=0.1)
        if msg_data:
            #log.info("Recv ctrl message from remote local control program : %s" % str(msg_data))

            #time_val = json_message['time']
            #peer_node = json_message['peer']
            #msg_data = json_message['msg']
            remote_wlan_ipAddress = msg_data['ip_address']
            measurement = msg_data['measure']

            # add measurement on nodes element
            for node in mytestbed.wifinodes:
                if node.wlan_ipAddress == remote_wlan_ipAddress[0] and measurement != False:
                    node.add_measure(measurement)
                    #print('Append measurements at node %s : %s' % (str(remote_wlan_ipAddress), str(measurement) ))

            # msg_data['traffic'] = get_traffic()
            # socket_visualizer.send_json(msg_data)

        cycle += 1
        gevent.sleep(1)




def main(args):
    log.debug(args)

    config_file_path = args['--config']
    config = None
    with open(config_file_path, 'r') as f:
        config = yaml.load(f)

    controller.load_config(config)
    controller.start()
    num_testbed_nodes = mytestbed.getExperimentNodesNumber()

    nodes_platform_info = []
    #control loop
    while True:
        gevent.sleep(2)
        print("\n")
        print("Connected nodes", [str(node.name) for node in nodes])

        if len(nodes) == num_testbed_nodes:

            #find node rules
            mytestbed.initializeTestbedTopology()

            #get node capabilities, get capabilities from the first detected node, all nodes are the same
            #nodes_platform_info.append(get_platform_information( nodes[0], log, controller))

            #start connection to visualizzer - Python or testbed DB
            #socket_visualizer = start_visualizer_connection()
            socket_visualizer = None

            print("Deploy local control program on a remote nodes")

            #deploy control program on AP node
            lcpDescriptor_ap_node = controller.node(mytestbed.ap_node).hc.start_local_control_program(program=local_control_program)
            lcpDescriptor_ap_node.send( {'interface' : 'wlan0', 'tuning_enabler' : 2})
            #start thread for collect measurements from nodes
            _thread.start_new_thread( collect_remote_messages, (lcpDescriptor_ap_node, socket_visualizer, ) )

            #deploy control program on WMP nodes
            lcpDescriptor_wmp_nodes = []
            for ii in range(0,len(mytestbed.wmp_nodes)):
                lcpDescriptor_wmp_nodes.append(controller.node(mytestbed.wmp_nodes[ii]).hc.start_local_control_program(program=local_control_program))
                lcpDescriptor_wmp_nodes[ii].send( {'interface' : 'wlan0', 'tuning_enabler' : 1})
                #start thread for collect measurements from nodes
                _thread.start_new_thread( collect_remote_messages, (lcpDescriptor_wmp_nodes[ii], socket_visualizer, ) )

            #deploy control program on legacy nodes
            lcpDescriptor_legacy_nodes = []
            for ii in range(0,len(mytestbed.legacy_nodes)):
                lcpDescriptor_legacy_nodes.append(controller.node(mytestbed.legacy_nodes[ii]).hc.start_local_control_program(program=local_control_program))
                lcpDescriptor_legacy_nodes[ii].send( {'interface' : 'wlan0', 'tuning_enabler' : 2})
                #start thread for collect measurements from nodes
                _thread.start_new_thread( collect_remote_messages, (lcpDescriptor_legacy_nodes[ii], socket_visualizer, ) )

<<<<<<< HEAD:wmp/year1_showcase3/showcase3_legacy_experiment_controller
            EXPERIMENT_DURATION= 120
=======
            EXPERIMENT_DURATION= 30
>>>>>>> origin/master:wmp/year1_showcase3/showcase3_legacy_experiment_controller
            dt=0
            old_traffic_number = 0

            #start server traffic
            controller.delay(2).nodes(mytestbed.ap_node).net.create_packetflow_sink(port='1234')
<<<<<<< HEAD:wmp/year1_showcase3/showcase3_legacy_experiment_controller
            for node in mytestbed.legacy_nodes:
                print("START iperf on client %s" % str(node.ip))
                controller.delay(4).nodes(node).net.start_packetflow( '192.168.3.'+mytestbed.ap_node.ip.split('.')[3], '1234', '500', '3M')

            for node in mytestbed.wmp_nodes:
                print("START iperf on client %s" % str(node.ip))
                controller.delay(4).nodes(node).net.start_packetflow( '192.168.3.'+mytestbed.ap_node.ip.split('.')[3], '1234', '500', '3M')
=======
            for node in mytestbed.wmp_nodes:
                print("START iperf on client %s" % str(node.ip))
                controller.delay(4).nodes(node).net.start_packetflow( '192.168.3.'+str(mytestbed.ap_node.ip[7:10]), '1234', '500', '3M')

>>>>>>> origin/master:wmp/year1_showcase3/showcase3_legacy_experiment_controller


            while True:
                traffic_number = get_traffic()
                #print("Send ctrl message to remote control program")
                lcpDescriptor_ap_node.send({"traffic_number": traffic_number})


                log.warning('waiting for node increase, traffic_number = %d (%d sec / %d)' % (traffic_number, dt, EXPERIMENT_DURATION) )
                old_traffic_number = traffic_number
                dt += 1
                time.sleep(1)

                if dt > EXPERIMENT_DURATION:
                    break


            controller.delay(3).nodes(mytestbed.ap_node).net.destroy_packetflow_sink()
            controller.delay(2).nodes(mytestbed.wmp_nodes).net.stop_packetflow()
            controller.delay(2).nodes(mytestbed.legacy_nodes).net.stop_packetflow()

            print("Terminate remote local control program")
            lcpDescriptor_ap_node.close()
            for ii in range(0,len(mytestbed.wmp_nodes)):
                lcpDescriptor_wmp_nodes[ii].close()
            for ii in range(0,len(mytestbed.legacy_nodes)):
                lcpDescriptor_legacy_nodes[ii].close()
<<<<<<< HEAD:wmp/year1_showcase3/showcase3_legacy_experiment_controller
=======

            controller.delay(3).nodes(mytestbed.ap_node).net.destroy_packetflow_sink()
            controller.delay(2).nodes(mytestbed.wmp_nodes).net.stop_packetflow()
            controller.delay(2).nodes(mytestbed.legacy_nodes).net.stop_packetflow()

>>>>>>> origin/master:wmp/year1_showcase3/showcase3_legacy_experiment_controller

            """
            Plot collect measurement of phase 1
            """
            meas_collector.plot_last_measurements(nodes=mytestbed.wifinodes, measurement_types=None, plot_title="PLOT SC3", plot_directory="showcase_data")
            # meas_collector.clear_nodes_measurements(nodes=mytestbed.wifinodes)
<<<<<<< HEAD:wmp/year1_showcase3/showcase3_legacy_experiment_controller

=======
>>>>>>> origin/master:wmp/year1_showcase3/showcase3_legacy_experiment_controller
            break




if __name__ == "__main__":
    try:
        from docopt import docopt
    except:
        print("""
        Please install docopt using:
            pip install docopt==0.6.1
        For more refer to:
        https://github.com/docopt/docopt
        """)
        raise

    args = docopt(__doc__, version=__version__)

    log_level = logging.INFO  # default
    if args['--verbose']:
        log_level = logging.DEBUG
    elif args['--quiet']:
        log_level = logging.ERROR

    logfile = None
    if args['--logfile']:
        logfile = args['--logfile']

    logging.basicConfig(filename=logfile, level=log_level,
        format='%(asctime)s - %(name)s.%(funcName)s() - %(levelname)s - %(message)s')

    try:
        main(args)
    except KeyboardInterrupt:
        log.debug("Controller exits")
    finally:
        log.debug("Exit")
        controller.stop()