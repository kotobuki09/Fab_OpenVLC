#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
wishful_controller_simple.py: First implementation of WiSHFUL controller

Usage:
   wishful_controller_simple.py [options] [-q | -v]

Options:
   --logfile name      Name of the logfile
   --config configFile Config file path

Example:
   ./wishful_simple_local_controller -v --config ./config.yaml 

Other options:
   -h, --help          show this help message and exit
   -q, --quiet         print less text
   -v, --verbose       print more text
   --version           show version and exit
"""

import sys
import datetime
import logging
import gevent
import yaml


sys.path.append('../../../')
sys.path.append("../../../agent_modules/wifi_ath")
sys.path.append("../../../agent_modules/wifi_wmp")
sys.path.append("../../../agent_modules/wifi")
sys.path.append('../../../upis')
sys.path.append('../../../framework')
sys.path.append('../../../agent')
sys.path.append('../../../controller')

import wishful_upis as upis
import wishful_controller

from examples.wmp.wmp_edca.wmp_helper.controller_utils import *
from agent_modules.wifi_wmp.wmp_structure import UPI_R


# from wishful_upis.radio import radio_info_t
# from wishful_upis.radio import radio_program_t

import wishful_framework.upi_arg_classes.edca as edca


__author__ = "Domenico Garlisi"
__copyright__ = "Copyright (c) 2015, Technische Universit√§t Berlin"
__version__ = "0.1.0"
__email__ = "{domenico.garlisi@cnit.it"


log = logging.getLogger('wishful_agent.main')
controller = wishful_controller.Controller()
nodes = []


@controller.new_node_callback()
def new_node(node):
    nodes.append(node)
    print("New node appeared:")
    print(node)


@controller.node_exit_callback()
def node_exit(node, reason):
    if node in nodes:
        nodes.remove(node);
    print("NodeExit : NodeID : {} Reason : {}".format(node.id, reason))


@controller.set_default_callback()
def default_callback(group, node, cmd, data):
    print("DEFAULT CALLBACK : Group: {}, NodeId: {}, Cmd: {}, Returns: {}".format(group, node.id, cmd, data))


def main(args):
    log.debug(args)

    config_file_path = args['--config']
    config = None
    with open(config_file_path, 'r') as f:
        config = yaml.load(f)

    controller.load_config(config)
    controller.start()

    nodes_platform_info = []
    #control loop
    while True:
        gevent.sleep(10)
        print("\n")
        print("Connected nodes", [str(node.name) for node in nodes])
        if nodes:
            #nodes_platform_info.append(getPlatformInformation( nodes[0], log, controller))
            UPIargs = { 'interface' : 'wlan0', 'parameters' : [UPI_R.CSMA_CW, UPI_R.CSMA_CW_MIN, UPI_R.CSMA_CW_MAX] }
            node_parameters = controller.nodes(nodes[0]).radio.iface("wlan0").get_parameters(UPIargs)
            print("node_parameters : %s" % str(node_parameters) )
            UPIargs = { 'interface' : 'wlan0', UPI_R.CSMA_CW: 127, UPI_R.CSMA_CW_MIN : 127, UPI_R.CSMA_CW_MAX : 511 }
            node_result = controller.nodes(nodes[0]).radio.iface("wlan0").set_parameters(UPIargs)
            print("node_result : %s" % str(node_result) )
            UPIargs = { 'interface' : 'wlan0', 'parameters' : [UPI_R.CSMA_CW, UPI_R.CSMA_CW_MIN, UPI_R.CSMA_CW_MAX] }
            node_parameters = controller.nodes(nodes[0]).radio.iface("wlan0").get_parameters(UPIargs)
            print("node_parameters after setting : %s" % str(node_parameters) )
            break



if __name__ == "__main__":
    try:
        from docopt import docopt
    except:
        print("""
        Please install docopt using:
            pip install docopt==0.6.1
        For more refer to:
        https://github.com/docopt/docopt
        """)
        raise

    args = docopt(__doc__, version=__version__)

    log_level = logging.INFO  # default
    if args['--verbose']:
        log_level = logging.DEBUG
    elif args['--quiet']:
        log_level = logging.ERROR

    logfile = None
    if args['--logfile']:
        logfile = args['--logfile']

    logging.basicConfig(filename=logfile, level=log_level,
        format='%(asctime)s - %(name)s.%(funcName)s() - %(levelname)s - %(message)s')

    try:
        main(args)
    except KeyboardInterrupt:
        log.debug("Controller exits")
    finally:
        log.debug("Exit")
        controller.stop()